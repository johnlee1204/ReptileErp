/*
 * File: app/view/Breeding.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PetMaster.view.Breeding', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.breeding',

	requires: [
		'PetMaster.view.BreedingViewModel',
		'PetMaster.view.BreedingForm',
		'Ext.form.field.ComboBox',
		'Ext.form.field.Date',
		'Ext.button.Button',
		'Ext.grid.Panel',
		'Ext.toolbar.Toolbar',
		'Ext.grid.column.Column',
		'Ext.view.Table'
	],

	viewModel: {
		type: 'breeding'
	},
	bodyStyle: 'background:none',
	title: 'Breeding',
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'container',
			padding: 10,
			items: [
				{
					xtype: 'container',
					layout: {
						type: 'hbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'combobox',
							docFormSkip: true,
							itemId: 'breedWith',
							fieldLabel: 'Breed With',
							displayField: 'serial',
							forceSelection: true,
							queryMode: 'local',
							valueField: 'reptileId',
							bind: {
								store: '{BreedWithStore}'
							}
						},
						{
							xtype: 'datefield',
							docFormSkip: true,
							itemId: 'breedDate',
							margin: '0 0 0 10',
							fieldLabel: 'Breed Date'
						}
					]
				},
				{
					xtype: 'button',
					margin: '5 0 0 0',
					icon: '/inc/img/silk_icons/add.png',
					text: 'Add',
					listeners: {
						click: 'onButtonClick'
					}
				}
			]
		},
		{
			xtype: 'container',
			flex: 1,
			layout: {
				type: 'hbox',
				align: 'stretch'
			},
			items: [
				{
					xtype: 'gridpanel',
					flex: 1,
					itemId: 'currenlyBreedingWithGrid',
					title: 'Currently Breeding With',
					bind: {
						store: '{CurrentlyBreedingWithStore}'
					},
					dockedItems: [
						{
							xtype: 'toolbar',
							dock: 'top',
							itemId: 'currenlyBreedingWithToolbar'
						}
					],
					columns: [
						{
							xtype: 'gridcolumn',
							width: 153,
							dataIndex: 'serial',
							text: 'Serial'
						}
					],
					viewConfig: {
						enableTextSelection: true
					},
					listeners: {
						selectionchange: 'onCurrenlyBreedingWithGridSelectionChange'
					}
				},
				{
					xtype: 'breedingform',
					flex: 1,
					itemId: 'breedingForm'
				}
			]
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onButtonClick: function(button, e, eOpts) {
		this.createBreedingPair();
	},

	onCurrenlyBreedingWithGridSelectionChange: function(model, selected, eOpts) {
		if(!selected || selected.length !== 1) {
			return;
		}

		selected = selected[0];

		this.queryById("breedingForm").readBreedingPair(selected.data.breedingId);
	},

	onPanelAfterRender: function(component, eOpts) {
		this.buildNiceGridMenu();
	},

	buildNiceGridMenu: function() {
		Ext.create("NiceGridMenu", {
			menuItems:[{action:"deletePair", text:"Delete Pair", icon:"/inc/img/silk_icons/cancel.png", disabled:true}],
			callbackHandler:function(action, data) {
				switch(action) {
					case 'deletePair':
						this.deleteBreedingPair(data.breedingId);
						break;
				}
			},
			filterField:true,
			grid:this.queryById('currenlyBreedingWithGrid'),
			toolbar:this.queryById('currenlyBreedingWithToolbar'),
			scope:this
		});
	},

	readBreedingData: function(reptileId) {
		AERP.Ajax.request({
			url:"/PetMaster/readBreedingData",
			jsonData:{reptileId:reptileId},
			success:function(reply) {
				this.reptileId = reptileId;
				this.getViewModel().getStore('BreedWithStore').loadData(reply.breedWith);
				this.getViewModel().getStore('CurrentlyBreedingWithStore').loadData(reply.currentlyBreedingWith);
			},
			scope:this,
			mask:this
		});
	},

	createBreedingPair: function() {
		AERP.Ajax.request({
			url:"/PetMaster/createBreedingPair",
			jsonData:{reptileId1:this.reptileId, reptileId2:this.queryById('breedWith').getValue(), breedDate:this.queryById('breedDate').getValue()},
			success:function(reply) {
				this.readBreedingData(this.reptileId);
			},
			scope:this,
			mask:this
		});
	},

	deleteBreedingPair: function(breedingId) {
		AERP.Ajax.request({
			url:"/PetMaster/deleteBreedingPair",
			jsonData:{breedingId:breedingId},
			success:function(reply) {
				this.readBreedingData(this.reptileId);
			},
			scope:this,
			mask:this
		});
	}

});