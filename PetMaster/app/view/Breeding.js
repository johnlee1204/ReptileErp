/*
 * File: app/view/Breeding.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PetMaster.view.Breeding', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.breeding',

	requires: [
		'PetMaster.view.BreedingViewModel',
		'Ext.form.field.ComboBox',
		'Ext.button.Button',
		'Ext.grid.Panel',
		'Ext.grid.column.Column',
		'Ext.view.Table'
	],

	viewModel: {
		type: 'breeding'
	},
	bodyStyle: 'background:none',
	title: 'Breeding',
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'container',
			padding: 10,
			items: [
				{
					xtype: 'combobox',
					docFormSkip: true,
					itemId: 'breedWith',
					fieldLabel: 'Breed With',
					displayField: 'serial',
					forceSelection: true,
					queryMode: 'local',
					valueField: 'reptileId',
					bind: {
						store: '{BreedWithStore}'
					}
				},
				{
					xtype: 'button',
					icon: '/inc/img/silk_icons/add.png',
					text: 'Add',
					listeners: {
						click: 'onButtonClick'
					}
				}
			]
		},
		{
			xtype: 'gridpanel',
			flex: 1,
			title: 'Currently Breeding With',
			bind: {
				store: '{CurrentlyBreedingWithStore}'
			},
			columns: [
				{
					xtype: 'gridcolumn',
					dataIndex: 'serial',
					text: 'Serial'
				}
			]
		}
	],

	onButtonClick: function(button, e, eOpts) {
		this.createBreedingPair();
	},

	readBreedingData: function(reptileId) {
		AERP.Ajax.request({
			url:"/PetMaster/readBreedingData",
			jsonData:{reptileId:reptileId},
			success:function(reply) {
				this.reptileId = reptileId;
				this.getViewModel().getStore('BreedWithStore').loadData(reply.breedWith);
				this.getViewModel().getStore('CurrentlyBreedingWithStore').loadData(reply.currentlyBreedingWith);
			},
			scope:this,
			mask:this
		});
	},

	createBreedingPair: function() {
		AERP.Ajax.request({
			url:"/PetMaster/createBreedingPair",
			jsonData:{reptileId1:this.reptileId, reptileId2:this.queryById('breedWith').getValue()},
			success:function(reply) {
				this.readBreedingData(this.reptileId);
			},
			scope:this,
			mask:this
		});
	}

});