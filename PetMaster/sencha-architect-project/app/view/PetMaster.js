/*
 * File: app/view/PetMaster.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PetMaster.view.PetMaster', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.petmaster',

	mixins: [
		'DocForm'
	],
	requires: [
		'PetMaster.view.PetMasterViewModel',
		'PetMaster.view.HabitatData',
		'Ext.toolbar.Toolbar',
		'Ext.form.field.ComboBox',
		'Ext.tab.Panel',
		'Ext.tab.Tab',
		'Ext.form.field.Date',
		'Ext.form.field.TextArea',
		'Ext.grid.Panel',
		'Ext.grid.column.Date',
		'Ext.view.Table'
	],

	viewModel: {
		type: 'petmaster'
	},
	frame: true,
	title: 'Pet Master',
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	dockedItems: [
		{
			xtype: 'toolbar',
			dock: 'top',
			itemId: 'petFormToolbar'
		}
	],
	items: [
		{
			xtype: 'container',
			padding: 10,
			layout: {
				type: 'hbox',
				align: 'stretch'
			},
			items: [
				{
					xtype: 'textfield',
					itemId: 'name',
					fieldLabel: 'Serial',
					labelAlign: 'right',
					labelWidth: 60
				},
				{
					xtype: 'combobox',
					itemId: 'type',
					fieldLabel: 'Type',
					labelAlign: 'right',
					labelWidth: 60,
					displayField: 'type',
					forceSelection: true,
					queryMode: 'local',
					valueField: 'type',
					bind: {
						store: '{PetTypeStore}'
					},
					listeners: {
						afterrender: 'onTypeAfterRender'
					}
				}
			]
		},
		{
			xtype: 'tabpanel',
			flex: 1,
			bodyStyle: 'background:none',
			activeTab: 0,
			deferredRender: false,
			items: [
				{
					xtype: 'panel',
					bodyPadding: 10,
					bodyStyle: 'background:none',
					title: 'Pet',
					layout: {
						type: 'hbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'container',
							layout: 'vbox',
							items: [
								{
									xtype: 'textfield',
									formatCurrency: true,
									itemId: 'price',
									fieldLabel: 'Price',
									labelAlign: 'right'
								},
								{
									xtype: 'textfield',
									formatCurrency: true,
									itemId: 'sellPrice',
									fieldLabel: 'Actual Sell Price',
									labelAlign: 'right'
								},
								{
									xtype: 'container',
									margin: '0 0 5 0',
									layout: {
										type: 'hbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'combobox',
											itemId: 'sex',
											fieldLabel: 'Sex',
											labelAlign: 'right',
											displayField: 'sex',
											forceSelection: true,
											queryMode: 'local',
											valueField: 'sex',
											bind: {
												store: '{SexStore}'
											},
											listeners: {
												select: 'onSexSelect'
											}
										},
										{
											xtype: 'container',
											itemId: 'sexIcon',
											margin: '4 0 0 5'
										}
									]
								},
								{
									xtype: 'container',
									margin: '0 0 5 0',
									layout: {
										type: 'hbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'datefield',
											cls: 'docFormReadOnly',
											itemId: 'birthDate',
											fieldLabel: 'Birth Date',
											labelAlign: 'right',
											submitFormat: 'Y-m-d',
											listeners: {
												change: 'onBirthDateChange'
											}
										},
										{
											xtype: 'textfield',
											docFormSkip: true,
											itemId: 'age',
											width: 186,
											fieldLabel: 'Age',
											labelAlign: 'right',
											labelWidth: 50,
											readOnly: true,
											readOnlyCls: 'docFormReadOnly'
										}
									]
								},
								{
									xtype: 'datefield',
									itemId: 'receiveDate',
									fieldLabel: 'Receive Date',
									labelAlign: 'right',
									submitFormat: 'Y-m-d',
									listeners: {
										afterrender: 'onReceiveDateAfterRender'
									}
								},
								{
									xtype: 'datefield',
									itemId: 'sellDate',
									fieldLabel: 'Sell Date',
									labelAlign: 'right',
									submitFormat: 'Y-m-d',
									listeners: {
										afterrender: 'onSellDateAfterRender'
									}
								},
								{
									xtype: 'container',
									margin: '0 0 5 0',
									layout: {
										type: 'hbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'textfield',
											itemId: 'weight',
											fieldLabel: 'Weight',
											labelAlign: 'right'
										},
										{
											xtype: 'container',
											html: 'Grams',
											margin: '3 0 0 5'
										}
									]
								},
								{
									xtype: 'textfield',
									itemId: 'vendor',
									fieldLabel: 'Vendor',
									labelAlign: 'right'
								},
								{
									xtype: 'textfield',
									formatCurrency: true,
									itemId: 'cost',
									fieldLabel: 'Cost',
									labelAlign: 'right'
								},
								{
									xtype: 'container',
									margin: '0 0 5 0',
									layout: 'hbox',
									items: [
										{
											xtype: 'combobox',
											itemId: 'habitatId',
											fieldLabel: 'Habitat',
											labelAlign: 'right',
											displayField: 'habitat',
											forceSelection: true,
											queryMode: 'local',
											valueField: 'habitatId',
											bind: {
												store: '{HabitatStore}'
											}
										},
										{
											xtype: 'button',
											margin: '0 0 0 15',
											icon: '/inc/img/silk_icons/pencil.png',
											text: 'Edit Habitats',
											listeners: {
												click: 'onButtonClick'
											}
										}
									]
								},
								{
									xtype: 'combobox',
									itemId: 'food',
									fieldLabel: 'Food',
									labelAlign: 'right',
									displayField: 'type',
									forceSelection: true,
									queryMode: 'local',
									valueField: 'type',
									bind: {
										store: '{FoodTypeStore}'
									},
									listeners: {
										afterrender: 'onFoodAfterRender'
									}
								},
								{
									xtype: 'textfield',
									itemId: 'feedingQuantity',
									fieldLabel: 'Food Quantity',
									labelAlign: 'right'
								},
								{
									xtype: 'container',
									layout: {
										type: 'hbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'textfield',
											itemId: 'feedingFrequency',
											fieldLabel: 'Feed Frequency',
											labelAlign: 'right'
										},
										{
											xtype: 'container',
											html: 'Times Per Week',
											margin: '3 0 0 5'
										}
									]
								},
								{
									xtype: 'textfield',
									itemId: 'customer',
									margin: '5 0 0 0',
									fieldLabel: 'Customer',
									labelAlign: 'right'
								},
								{
									xtype: 'textareafield',
									height: 165,
									itemId: 'notes',
									margin: '5 0 0 0',
									width: 408,
									fieldLabel: 'Notes',
									labelAlign: 'right'
								}
							]
						},
						{
							xtype: 'gridpanel',
							itemId: 'attachmentGrid',
							margin: '0 0 0 15',
							maxHeight: 543,
							width: 500,
							title: 'Attachments',
							bind: {
								store: '{AttachmentStore}'
							},
							dockedItems: [
								{
									xtype: 'toolbar',
									dock: 'top',
									itemId: 'attachmentToolbar'
								}
							],
							columns: [
								{
									xtype: 'gridcolumn',
									renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
										if(!value) {
											return "";
										}
										record.data.fileLocation = record.data.fileLocation.substring(record.data.fileLocation.indexOf("/images"));
										return "<a target = '_blank' href = '" + record.data.fileLocation + record.data.fileName + "'><img width = '200px' height='200px' alt='Not an Image' src='" + record.data.fileLocation + record.data.fileName + "'></a>";
										//return "<img width = '200px' height='200px' alt='Not an Image' src= '/PetMaster/readAttachment?petAttachmentId=" + record.data.petAttachmentId + "'>";
									},
									width: 288,
									dataIndex: 'fileLocation',
									text: 'Preview'
								},
								{
									xtype: 'datecolumn',
									dataIndex: 'photoDate',
									text: 'Photo Date'
								}
							]
						}
					]
				},
				{
					xtype: 'habitatdata',
					itemId: 'habitatData'
				}
			]
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onTypeAfterRender: function(component, eOpts) {
		AppWindowManager.appOn('dropDownSelectionEditor', {
			scope:this,
			selectionchanged:function() {
				this.readPetTypes();
			}
		});

		component.el.on({
		    contextmenu: function(event) {
		        event.stopEvent();
		        AppWindowManager.appLink('dropDownSelectionEditor', {dataKey:'petType'});
		    },
		    scope:this
		});

	},

	onSexSelect: function(combo, record, eOpts) {
		this.setSexIcon(record.data.sex);
	},

	onBirthDateChange: function(field, newValue, oldValue, eOpts) {
		let age = this.queryById('age');
		if(!newValue || !newValue.getTime) {
			age.setValue("");
			return;
		}
		var ageDifMs = Date.now() - newValue.getTime();
		if(ageDifMs < 0) {
			age.setValue("");
			return;
		}
		var ageDate = new Date(ageDifMs); // miliseconds from epoch
		let years = Math.abs(ageDate.getUTCFullYear() - 1970);
		let months = Math.abs(ageDate.getMonth());
		age.setValue(years + " Years " + months + " Months");
	},

	onReceiveDateAfterRender: function(component, eOpts) {
		component.el.on('dblclick', function() {
			component.setValue(new Date());
		});
	},

	onSellDateAfterRender: function(component, eOpts) {
		component.el.on('dblclick', function() {
			component.setValue(new Date());
		});
	},

	onButtonClick: function(button, e, eOpts) {
		window.open("/Habitat");
	},

	onFoodAfterRender: function(component, eOpts) {
		AppWindowManager.appOn('dropDownSelectionEditor', {
			scope:this,
			selectionchanged:function() {
				this.readFoodTypes();
			}
		});

		component.el.on({
		    contextmenu: function(event) {
		        event.stopEvent();
		        AppWindowManager.appLink('dropDownSelectionEditor', {dataKey:'foodType'});
		    },
		    scope:this
		});

	},

	onPanelAfterRender: function(component, eOpts) {
		this.readPetTypes();
		this.readFoodTypes();

		this.buildNiceGridMenu();

		AERP.Ajax.request({
			url:'/Habitat/readHabitats',
			success:function(reply) {
				this.getViewModel().getStore('HabitatStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});

		this.docFormInit({
			toolbarId:'petFormToolbar',
			addFn:'createPet',
			saveFn:'updatePet',
			deleteFn:'deletePet',
			searchFn:'searchPets',
			searchableFields:['name', 'type', 'receiveDate', 'sellDate']
		});

		var listeners = {
			scope:this,
			beforeUpLoad: function(){
				if(!this.petId){
					Ext.Msg.alert("","Please load an Animal before uploading!");
					return false;
				}
			},

			uploadFinished: function (uploadErrors,files){
				if(files.length>0){
					Ext.Msg.alert('','Upload Success!');
					this.readPet(this.petId);
				}
			}
		};

		//Main Viewport
		this.fileDropper = new FileDropper({
			viewport: component.ownerCt,
			uploadUrl:'/PetMaster/uploadAttachment',
			listeners:listeners,
			allowedExtensions:['png', 'jpg', 'jpeg'],
			maxFileSize:50
		});
	},

	buildNiceGridMenu: function() {
		Ext.create("NiceGridMenu", {
			menuItems:[{action:'deleteAttachment', text:"Delete", icon:'/inc/img/silk_icons/delete.png', disabled:true}],
			callbackHandler:function(action, data) {
				switch(action) {
					case 'deleteAttachment':
						this.deleteAttachment(data.petAttachmentId);
						break;
				}
			},
			grid:this.queryById('attachmentGrid'),
			toolbar:this.queryById('attachmentToolbar'),
			scope:this
		});
	},

	deleteAttachment: function(petAttachmentId) {
		AERP.Ajax.request({
			url:'/PetMaster/deleteAttachment',
			jsonData:{petAttachmentId:petAttachmentId},
			success:function(reply) {
				this.readPetAttachments();
			},
			scope:this,
			mask:this
		});
	},

	readPetTypes: function() {
		AERP.Ajax.request({
			url:'/DropDownSelectionEditor/readSelectionsForCombo',
			jsonData:{selectionKey:'petType'},
			success:function(reply) {
				this.getViewModel().getStore('PetTypeStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	readFoodTypes: function() {
		AERP.Ajax.request({
			url:'/DropDownSelectionEditor/readSelectionsForCombo',
			jsonData:{selectionKey:'foodType'},
			success:function(reply) {
				this.getViewModel().getStore('FoodTypeStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	readPet: function(petId) {
		AERP.Ajax.request({
			url:'/PetMaster/readPet',
			jsonData:{petId:petId},
			success:function(reply) {
				this.petId = petId;
				if(reply.data.habitatId) {
					this.queryById('habitatData').readHabitatData(reply.data.habitatId);
				}

				this.setSexIcon(reply.data.sex);

				var url = '/PetMaster/uploadAttachment?' + Ext.urlEncode({petId:petId});
				this.fileDropper.setUploadUrl(url);

				this.readPetAttachments();

				this.docFormLoadFormData(reply);
			},
			scope:this,
			mask:this
		});
	},

	readPetAttachments: function() {
		AERP.Ajax.request({
			url:'/PetMaster/readPetAttachments',
			jsonData:{petId:this.petId},
			success:function(reply) {
				this.getViewModel().getStore('AttachmentStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	setSexIcon: function(sex) {
		let sexIcon = this.queryById('sexIcon');

		if(sex === "Male") {
			sexIcon.setHtml("<img src='/inc/img/silk_icons/male.png'>");
		} else if (sex === "Female") {
			sexIcon.setHtml("<img src='/inc/img/silk_icons/female.png'>");
		} else {
			sexIcon.setHtml("");
		}
	},

	createPet: function() {
		AERP.Ajax.request({
			url:'/PetMaster/createPet',
			jsonData:this.docFormGetAllFieldValues(),
			success:function(reply) {
				this.readPet(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	updatePet: function() {
		let jsonData = this.docFormGetAllFieldValues();
		jsonData.petId = this.petId;

		AERP.Ajax.request({
			url:'/PetMaster/updatePet',
			jsonData:jsonData,
			success:function(reply) {
				this.readPet(this.petId);
			},
			scope:this,
			mask:this
		});
	},

	deletePet: function() {
		AERP.Ajax.request({
			url:'/PetMaster/deletePet',
			jsonData:{petId:this.petId},
			success:function(reply) {
				this.petId = null;
				this.setSexIcon("");
				this.docFormReset();
			},
			scope:this,
			mask:this
		});
	},

	searchPets: function() {
		if(!this.petSearchWindow) {
			this.petSearchWindow = Ext.create('PetMaster.view.PetSearch', {
				listeners:{
					scope:this,
					'petselected':function(petId) {
						this.readPet(petId);
					}
				}
			});
		}

		this.petSearchWindow.show();
		this.petSearchWindow.searchPets({
			name:this.queryById('name').getValue(),
			type:this.queryById('type').getValue(),
			receiveDate:this.queryById('receiveDate').getSubmitValue(),
			sellDate:this.queryById('sellDate').getSubmitValue()
		});
	}

});