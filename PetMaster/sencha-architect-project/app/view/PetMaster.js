/*
 * File: app/view/PetMaster.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PetMaster.view.PetMaster', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.petmaster',

	mixins: [
		'DocForm'
	],
	requires: [
		'PetMaster.view.PetMasterViewModel',
		'PetMaster.view.HabitatData',
		'Ext.toolbar.Toolbar',
		'Ext.form.field.ComboBox',
		'Ext.tab.Panel',
		'Ext.tab.Tab',
		'Ext.form.field.Date'
	],

	viewModel: {
		type: 'petmaster'
	},
	frame: true,
	title: 'Pet Master',
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	dockedItems: [
		{
			xtype: 'toolbar',
			dock: 'top',
			itemId: 'petFormToolbar'
		}
	],
	items: [
		{
			xtype: 'container',
			padding: 10,
			layout: {
				type: 'hbox',
				align: 'stretch'
			},
			items: [
				{
					xtype: 'textfield',
					itemId: 'name',
					fieldLabel: 'Pet Name',
					labelAlign: 'right',
					labelWidth: 60
				},
				{
					xtype: 'combobox',
					itemId: 'type',
					fieldLabel: 'Type',
					labelAlign: 'right',
					labelWidth: 60,
					displayField: 'type',
					forceSelection: true,
					queryMode: 'local',
					valueField: 'type',
					bind: {
						store: '{PetTypeStore}'
					},
					listeners: {
						afterrender: 'onTypeAfterRender'
					}
				}
			]
		},
		{
			xtype: 'tabpanel',
			flex: 1,
			bodyStyle: 'background:none',
			activeTab: 0,
			deferredRender: false,
			items: [
				{
					xtype: 'panel',
					bodyPadding: 10,
					bodyStyle: 'background:none',
					title: 'Pet',
					items: [
						{
							xtype: 'textfield',
							formatCurrency: true,
							itemId: 'price',
							fieldLabel: 'Price',
							labelAlign: 'right'
						},
						{
							xtype: 'datefield',
							itemId: 'birthDate',
							fieldLabel: 'Birth Date',
							labelAlign: 'right',
							submitFormat: 'Y-m-d'
						},
						{
							xtype: 'datefield',
							itemId: 'receiveDate',
							fieldLabel: 'Receive Date',
							labelAlign: 'right',
							submitFormat: 'Y-m-d',
							listeners: {
								afterrender: 'onReceiveDateAfterRender'
							}
						},
						{
							xtype: 'datefield',
							itemId: 'sellDate',
							fieldLabel: 'Sell Date',
							labelAlign: 'right',
							submitFormat: 'Y-m-d',
							listeners: {
								afterrender: 'onSellDateAfterRender'
							}
						},
						{
							xtype: 'textfield',
							itemId: 'vendor',
							fieldLabel: 'Vendor',
							labelAlign: 'right'
						},
						{
							xtype: 'textfield',
							formatCurrency: true,
							itemId: 'cost',
							fieldLabel: 'Cost',
							labelAlign: 'right'
						},
						{
							xtype: 'combobox',
							itemId: 'habitatId',
							fieldLabel: 'Habitat',
							labelAlign: 'right',
							displayField: 'habitat',
							forceSelection: true,
							queryMode: 'local',
							valueField: 'habitatId',
							bind: {
								store: '{HabitatStore}'
							}
						},
						{
							xtype: 'combobox',
							itemId: 'food',
							fieldLabel: 'Food',
							labelAlign: 'right',
							displayField: 'type',
							forceSelection: true,
							queryMode: 'local',
							valueField: 'type',
							bind: {
								store: '{FoodTypeStore}'
							},
							listeners: {
								afterrender: 'onFoodAfterRender'
							}
						},
						{
							xtype: 'textfield',
							itemId: 'feedingQuantity',
							fieldLabel: 'Food Quantity',
							labelAlign: 'right'
						},
						{
							xtype: 'container',
							layout: {
								type: 'hbox',
								align: 'stretch'
							},
							items: [
								{
									xtype: 'textfield',
									itemId: 'feedingFrequency',
									fieldLabel: 'Feed Frequency',
									labelAlign: 'right'
								},
								{
									xtype: 'container',
									html: 'Times Per Week',
									margin: '3 0 0 5'
								}
							]
						},
						{
							xtype: 'textfield',
							itemId: 'customer',
							margin: '5 0 0 0',
							fieldLabel: 'Customer',
							labelAlign: 'right'
						}
					]
				},
				{
					xtype: 'habitatdata',
					itemId: 'habitatData'
				}
			]
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onTypeAfterRender: function(component, eOpts) {
		AppWindowManager.appOn('dropDownSelectionEditor', {
			scope:this,
			selectionchanged:function() {
				this.readPetTypes();
			}
		});

		component.el.on({
		    contextmenu: function(event) {
		        event.stopEvent();
		        AppWindowManager.appLink('dropDownSelectionEditor', {dataKey:'petType'});
		    },
		    scope:this
		});

	},

	onReceiveDateAfterRender: function(component, eOpts) {
		component.el.on('dblclick', function() {
			component.setValue(new Date());
		});
	},

	onSellDateAfterRender: function(component, eOpts) {
		component.el.on('dblclick', function() {
			component.setValue(new Date());
		});
	},

	onFoodAfterRender: function(component, eOpts) {
		AppWindowManager.appOn('dropDownSelectionEditor', {
			scope:this,
			selectionchanged:function() {
				this.readFoodTypes();
			}
		});

		component.el.on({
		    contextmenu: function(event) {
		        event.stopEvent();
		        AppWindowManager.appLink('dropDownSelectionEditor', {dataKey:'foodType'});
		    },
		    scope:this
		});

	},

	onPanelAfterRender: function(component, eOpts) {
		this.readPetTypes();
		this.readFoodTypes();

		AERP.Ajax.request({
			url:'/Habitat/readHabitats',
			success:function(reply) {
				this.getViewModel().getStore('HabitatStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});

		this.docFormInit({
			toolbarId:'petFormToolbar',
			addFn:'createPet',
			saveFn:'updatePet',
			deleteFn:'deletePet',
			searchFn:'searchPets',
			searchableFields:['name', 'type', 'receiveDate', 'sellDate']
		});
	},

	readPetTypes: function() {
		AERP.Ajax.request({
			url:'/DropDownSelectionEditor/readSelectionsForCombo',
			jsonData:{selectionKey:'petType'},
			success:function(reply) {
				this.getViewModel().getStore('PetTypeStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	readFoodTypes: function() {
		AERP.Ajax.request({
			url:'/DropDownSelectionEditor/readSelectionsForCombo',
			jsonData:{selectionKey:'foodType'},
			success:function(reply) {
				this.getViewModel().getStore('FoodTypeStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	readPet: function(petId) {
		AERP.Ajax.request({
			url:'/PetMaster/readPet',
			jsonData:{petId:petId},
			success:function(reply) {
				this.petId = petId;
				if(reply.data.habitatId) {
					this.queryById('habitatData').readHabitatData(reply.data.habitatId);
				}
				this.docFormLoadFormData(reply);
			},
			scope:this,
			mask:this
		});
	},

	createPet: function() {
		AERP.Ajax.request({
			url:'/PetMaster/createPet',
			jsonData:this.docFormGetAllFieldValues(),
			success:function(reply) {
				this.readPet(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	updatePet: function() {
		let jsonData = this.docFormGetAllFieldValues();
		jsonData.petId = this.petId;

		AERP.Ajax.request({
			url:'/PetMaster/updatePet',
			jsonData:jsonData,
			success:function(reply) {
				this.readPet(this.petId);
			},
			scope:this,
			mask:this
		});
	},

	deletePet: function() {
		AERP.Ajax.request({
			url:'/PetMaster/deletePet',
			jsonData:{petId:this.petId},
			success:function(reply) {
				this.petId = null;
				this.docFormReset();
			},
			scope:this,
			mask:this
		});
	},

	searchPets: function() {
		if(!this.petSearchWindow) {
			this.petSearchWindow = Ext.create('PetMaster.view.PetSearch', {
				listeners:{
					scope:this,
					'petselected':function(petId) {
						this.readPet(petId);
					}
				}
			});
		}

		this.petSearchWindow.show();
		this.petSearchWindow.searchPets({
			name:this.queryById('name').getValue(),
			type:this.queryById('type').getValue(),
			receiveDate:this.queryById('receiveDate').getSubmitValue(),
			sellDate:this.queryById('sellDate').getSubmitValue()
		});
	}

});