/*
 * File: app/view/DropDownSelectionEditorForm.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DropDownSelectionEditor.view.DropDownSelectionEditorForm', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.dropdownselectioneditorform',

	mixins: [
		'DocForm'
	],
	requires: [
		'DropDownSelectionEditor.view.DropDownSelectionEditorFormViewModel',
		'Ext.toolbar.Toolbar',
		'Ext.form.field.Number'
	],

	viewModel: {
		type: 'dropdownselectioneditorform'
	},
	bodyPadding: 10,
	bodyStyle: 'background:none',
	defaultListenerScope: true,

	dockedItems: [
		{
			xtype: 'toolbar',
			dock: 'top',
			itemId: 'selectionEditorToolbar'
		}
	],
	items: [
		{
			xtype: 'textfield',
			itemId: 'selection',
			width: 581,
			fieldLabel: 'Selection'
		},
		{
			xtype: 'numberfield',
			itemId: 'displayOrder',
			width: 161,
			fieldLabel: 'Order',
			hideTrigger: true
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onPanelAfterRender: function(component, eOpts) {
		this.docFormInit({
			toolbarId:'selectionEditorToolbar',
			addFn:'createSelection',
			saveFn:'updateSelection',
			deleteFn:'deleteSelection'
		});
	},

	readSelection: function(dropDownSelectionId) {
		AERP.Ajax.request({
			url:'/DropDownSelectionEditor/readSelection',
			jsonData:{dropDownSelectionId:dropDownSelectionId},
			success:function(reply) {
				this.dropDownSelectionId = dropDownSelectionId;
				this.docFormLoadFormData(reply);
			},
			scope:this,
			mask:this
		});
	},

	createSelection: function() {
		let jsonData = this.docFormGetAllFieldValues();
		jsonData.selectionKey = this.selectionKey;

		AERP.Ajax.request({
			url:'/DropDownSelectionEditor/createSelection',
			jsonData:jsonData,
			success:function(reply) {
				this.readSelection(reply.data);
				this.fireEvent('selectionchanged');
			},
			scope:this,
			mask:this
		});
	},

	updateSelection: function() {
		let jsonData = this.docFormGetAllFieldValues();
		jsonData.dropDownSelectionId = this.dropDownSelectionId;
		jsonData.selectionKey = this.selectionKey;

		AERP.Ajax.request({
			url:'/DropDownSelectionEditor/updateSelection',
			jsonData:jsonData,
			success:function(reply) {
				this.readSelection(this.dropDownSelectionId);
				this.fireEvent('selectionchanged');
			},
			scope:this,
			mask:this
		});
	},

	deleteSelection: function() {
		AERP.Ajax.request({
			url:'/DropDownSelectionEditor/deleteSelection',
			jsonData:{dropDownSelectionId:this.dropDownSelectionId},
			success:function(reply) {
				this.docFormReset();
				this.fireEvent('selectionchanged');
			},
			scope:this,
			mask:this
		});
	}

});