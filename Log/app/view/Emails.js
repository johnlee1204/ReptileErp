/*
 * File: app/view/Emails.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Log.view.Emails', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.Emails',

    requires: [
        'Log.view.EmailsViewModel',
        'Ext.form.Panel',
        'Ext.grid.Panel',
        'Ext.grid.column.Column',
        'Ext.toolbar.Paging',
        'Ext.view.Table'
    ],

    viewModel: {
        type: 'emails'
    },
    bodyBorder: true,
    bodyStyle: 'background:none;',
    icon: '/inc/img/silk_icons/email.png',
    title: 'Emails',
    defaultListenerScope: true,

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            border: false,
            frame: true,
            height: 1,
            minHeight: 1,
            ui: 'default-framed',
            frameHeader: false,
            title: '',
            layout: {
                type: 'hbox',
                align: 'stretch'
            }
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            itemId: 'EmailGrid',
            bind: {
                store: '{EmailStore}'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    itemId: 'EmailToolbar'
                },
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    displayInfo: true
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'sendDate',
                    text: 'Date'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    dataIndex: 'subject',
                    text: 'Subject'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'from',
                    text: 'From'
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'to',
                    text: 'To'
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'CC',
                    text: 'CC'
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'BCC',
                    text: 'BCC'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'mailServer',
                    text: 'Mail Server'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'srcIp',
                    text: 'IP'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'srcHostname',
                    text: 'Host Name'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'srcHelo',
                    text: 'SMTP Helo'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'size',
                    text: 'Size'
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    },

    onPanelAfterRender: function(component, eOpts) {
        this.loadEmails();

        var menuItems = [];
        menuItems.push({action:'viewEmail',text:'View Email',icon:'/inc/img/silk_icons/email.png',disabled:true});

        this.niceGridMenu = new NiceGridMenu({
        	menuItems:menuItems,
        	grid:this.queryById('EmailGrid'),
        	toolbar:this.queryById('EmailToolbar'),
        	doubleClick:'viewEmail',
        	onSelectionChange:function(btns,selected){
        		btns.viewEmail.disable();

        		if(selected.length > 0){
        			btns.viewEmail.enable();
        		}

        	},
        	callbackHandler:function(action,data){
        		switch(action){
        			case 'viewEmail':
                        this.viewEmail(data.contentHash);
        				break;
        		}
        	},
        	scope:this
        });
    },

    loadEmails: function() {
        //disabled while tab is hidden
        return false;


        /*this.queryById('getLog').setValue("");
        this.queryById('postLog').setValue("");

        var submitData = this.queryById('logSelectPanel').getValues();

        if(!submitData.appName){
            return false;
        }

        var params = {appName:submitData.appName};

        if(submitData.dateFrom){
            params.dateFrom = submitData.dateFrom;
        }

        if(submitData.dateTo){
            params.dateTo = submitData.dateTo;
        }

        if(submitData.timeTo){
            params.timeTo = submitData.timeTo;
        }

        if(submitData.timeFrom){
            params.timeFrom = submitData.timeFrom;
        }

        if(submitData.searchColumn){
            params.searchColumn = submitData.searchColumn;
        }

        if(submitData.searchOperation){
            params.searchOperation = submitData.searchOperation;
        }

        if(submitData.searchTerm){
            params.searchTerm = submitData.searchTerm;
        }
        */

        var emailStore = this.lookupViewModel().getStore('EmailStore');

        //emailStore.getProxy().setExtraParams(params);
        emailStore.loadPage(1);
    },

    viewEmail: function(fileName) {
        fileName = fileName + '.eml';


        if(!this.iframeDownloader){
            var downloaderIframeId = 'iframedownloader-' + Ext.id();
            this.iframeDownloader = Ext.getBody().createChild({tag:'iframe',id: downloaderIframeId, style:{visibility:'hidden',display:'inline'}});
        }
        this.iframeDownloader.dom.contentWindow.location.href = '/FilePass/getEmail?file='+fileName;
        var file = Ext.Object.toQueryString({'file':'/FilePass/getEmail?file='+fileName});
    }

});