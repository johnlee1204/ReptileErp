/*
 * File: app/view/AcessLogs.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Log.view.AcessLogs', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.acesslogs',

    requires: [
        'Log.view.AcessLogsViewModel',
        'Ext.form.Panel',
        'Ext.button.Button',
        'Ext.form.field.Date',
        'Ext.form.field.Time',
        'Ext.grid.Panel',
        'Ext.toolbar.Paging',
        'Ext.view.Table',
        'Ext.grid.column.Column',
        'Ext.form.field.TextArea'
    ],

    viewModel: {
        type: 'acesslogs'
    },
    itemId: 'AccessLogs',
    layout: 'fit',
    bodyBorder: true,
    bodyPadding: '0 10',
    bodyStyle: 'background:none;',
    icon: '/inc/img/silk_icons/table.png',
    title: 'Access Logs',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'form',
            border: false,
            frame: true,
            itemId: 'logSelectPanel',
            maxHeight: 60,
            ui: 'default-framed',
            layout: 'auto',
            frameHeader: false,
            items: [
                {
                    xtype: 'container',
                    cls: 'floatBox',
                    margin: '5 10 0 0',
                    width: 650,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'container',
                            cls: 'floatBox',
                            margin: '0 0 5 0',
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    itemId: 'appName',
                                    margin: '0 0 0 10',
                                    maxWidth: 300,
                                    width: 500,
                                    fieldLabel: 'App',
                                    labelWidth: 60,
                                    name: 'appName',
                                    matchFieldWidth: false,
                                    displayField: 'appName',
                                    minChars: 1,
                                    queryDelay: 75,
                                    queryMode: 'local',
                                    typeAhead: true,
                                    valueField: 'appValue',
                                    bind: {
                                        store: '{LogComboStore}'
                                    },
                                    listeners: {
                                        select: 'onCombobox2Select'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    flex: 1,
                                    itemId: 'searchColumnLog',
                                    margin: '0 0 0 15',
                                    maxWidth: 300,
                                    fieldLabel: 'Column',
                                    labelWidth: 60,
                                    name: 'searchColumn',
                                    displayField: 'columnName',
                                    valueField: 'columnName',
                                    bind: {
                                        store: '{LogColumnStore}'
                                    },
                                    listeners: {
                                        select: 'onSearchColumnLogSelect'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            margin: '0 10 0 0',
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    flex: 1,
                                    disabled: true,
                                    itemId: 'searchOperationLog',
                                    margin: '0 0 0 10',
                                    maxWidth: 210,
                                    fieldLabel: 'Operation',
                                    labelWidth: 60,
                                    name: 'searchOperation',
                                    editable: false,
                                    matchFieldWidth: false,
                                    displayField: 'comparison',
                                    valueField: 'value',
                                    bind: {
                                        store: '{OperationStore}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    flex: 1,
                                    disabled: true,
                                    itemId: 'searchTermLog',
                                    margin: '0 10 0 15',
                                    maxHeight: 25,
                                    width: 300,
                                    fieldLabel: 'Term',
                                    labelWidth: 40,
                                    name: 'searchTerm',
                                    enableKeyEvents: true,
                                    listeners: {
                                        keypress: 'onSearchTermLogKeypress',
                                        change: 'onSearchTermLogChange'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    flex: 1,
                                    disabled: true,
                                    itemId: 'logFilterButton',
                                    margin: '0 15 0 10',
                                    maxWidth: 70,
                                    icon: '/inc/img/silk_icons/find.png',
                                    text: 'Filter',
                                    listeners: {
                                        click: 'onLogFilterButtonClick'
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'container',
                    margin: '5 0 0 0',
                    width: 440,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'container',
                            cls: 'floatBox',
                            margin: '0 10 0 0',
                            width: 420,
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'datefield',
                                    itemId: 'dateFromLog',
                                    width: 200,
                                    fieldLabel: 'Date From',
                                    labelWidth: 75,
                                    name: 'dateFrom',
                                    submitFormat: 'Y-m-d',
                                    listeners: {
                                        change: 'onDateFromChange'
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    itemId: 'dateToLog',
                                    margin: '0 0 0 25',
                                    width: 200,
                                    fieldLabel: 'Date To',
                                    labelWidth: 65,
                                    name: 'dateTo',
                                    submitFormat: 'Y-m-d',
                                    listeners: {
                                        change: 'onDateToChange'
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'container',
                    cls: 'floatBox',
                    margin: '0 10 0 0',
                    width: 430,
                    layout: 'hbox',
                    items: [
                        {
                            xtype: 'timefield',
                            itemId: 'timeFromLog',
                            margin: '5 0 0 0',
                            width: 200,
                            fieldLabel: 'Time From',
                            labelWidth: 75,
                            name: 'timeFrom',
                            value: '0:00',
                            format: 'G:i',
                            listeners: {
                                change: 'onDateFromTimeChange'
                            }
                        },
                        {
                            xtype: 'timefield',
                            itemId: 'timeToLog',
                            margin: '5 0 0 25',
                            width: 200,
                            fieldLabel: 'Time To',
                            labelWidth: 65,
                            name: 'timeTo',
                            value: '23:59',
                            format: 'G:i',
                            listeners: {
                                change: 'onDateToTimeChange'
                            }
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'container',
            itemId: 'GridContainer',
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'gridpanel',
                    flex: 1,
                    border: true,
                    bodyBorder: false,
                    bind: {
                        store: '{LogGridStore}'
                    },
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'top',
                            width: 360,
                            displayInfo: true,
                            items: [
                                {
                                    xtype: 'button',
                                    icon: '/inc/img/silk_icons/page_white_excel.png',
                                    text: 'Download',
                                    listeners: {
                                        click: 'onButtonClick'
                                    }
                                }
                            ]
                        }
                    ],
                    viewConfig: {
                        enableTextSelection: true
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'date',
                            text: 'Date'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'ip',
                            text: 'IP'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            width: 300,
                            dataIndex: 'uri',
                            text: 'URI'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 150,
                            dataIndex: 'class',
                            text: 'Class'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 150,
                            dataIndex: 'method',
                            text: 'Method'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 200,
                            dataIndex: 'referrer',
                            text: 'Referrer'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'httpType',
                            text: 'HTTP Type'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'query',
                            text: 'Query'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'loggedIn',
                            text: 'Logged In'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            dataIndex: 'userId',
                            text: 'User Id'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'userName',
                            text: 'User Name'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'notFound',
                            text: 'Not Found'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'authorized',
                            text: 'Authorized'
                        }
                    ],
                    listeners: {
                        select: 'onGridpanelSelect',
                        cellcontextmenu: 'onGridpanelCellContextMenu',
                        celldblclick: 'onGridpanelCellDblClick'
                    }
                },
                {
                    xtype: 'container',
                    itemId: 'TextContainer',
                    margin: '0 0 60 0',
                    resizable: {
                        pinned: true
                    },
                    resizeHandles: 'n',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'textareafield',
                            flex: 1,
                            height: 250,
                            itemId: 'getLog',
                            padding: '5 0 0 0',
                            fieldLabel: 'GET Request Data',
                            labelAlign: 'top',
                            editable: false,
                            listeners: {
                                render: 'onGetLogRender'
                            }
                        },
                        {
                            xtype: 'textareafield',
                            flex: 1,
                            height: 250,
                            itemId: 'postLog',
                            padding: '5 0 0 0',
                            fieldLabel: 'POST Request Data',
                            labelAlign: 'top',
                            editable: false,
                            listeners: {
                                render: 'onPostLogRender'
                            }
                        },
                        {
                            xtype: 'textareafield',
                            flex: 1,
                            height: 250,
                            itemId: 'jsonLog',
                            padding: '5 0 0 0',
                            fieldLabel: 'JSON Data',
                            labelAlign: 'top',
                            editable: false,
                            listeners: {
                                render: 'onPostLogRender1'
                            }
                        }
                    ]
                }
            ]
        }
    ],

    onCombobox2Select: function(combo, record, eOpts) {
        this.loadLogs();
    },

    onSearchColumnLogSelect: function(combo, record, eOpts) {
        this.queryById('searchTermLog').setDisabled(false);
        this.queryById('logFilterButton').setDisabled(false);
        this.queryById('searchOperationLog').setDisabled(false);
        if(record.data.columnName !== this.logFilterColumn){
            this.setFilterButtonState('filter','logFilterButton');
        }
    },

    onSearchTermLogKeypress: function(textfield, e, eOpts) {
        if(e.getKey() === e.ENTER){
            this.loadLogs();
        }
    },

    onSearchTermLogChange: function(field, newValue, oldValue, eOpts) {
        if(newValue !== this.logColumn){
            this.setFilterButtonState('filter','logFilterButton');
        }
    },

    onLogFilterButtonClick: function(button, e, eOpts) {
        var searchColumn = this.queryById('searchColumnLog');
        var searchTerm = this.queryById('searchTermLog');
        var searchOperation = this.queryById('searchOperationLog');
        if(this.queryById('logFilterButton').buttonState === 'filter'){
            this.logFilterColumn = searchColumn.getValue();
            this.logFilterTerm = searchTerm.getValue();
            this.logFilterOperation = searchOperation.getValue();
            if(this.logFiltercolumn !== ""){
                this.loadLogs();
                this.setFilterButtonState('clear','logFilterButton');
            } else {
                Ext.Msg.alert("Error","No Filter Set");
            }
        } else {
            this.logFilterColumn = null;
            this.logFilterTerm = null;
            searchOperation.reset();
            searchColumn.reset();
            searchTerm.reset();
            searchTerm.setDisabled(true);
            searchOperation.setDisabled(true);
            this.setFilterButtonState('filter','logFilterButton');
            this.loadLogs();
        }
    },

    onDateFromChange: function(field, newValue, oldValue, eOpts) {
        this.loadLogs();
    },

    onDateToChange: function(field, newValue, oldValue, eOpts) {
        this.loadLogs();
    },

    onDateFromTimeChange: function(field, newValue, oldValue, eOpts) {
        this.loadLogs();
    },

    onDateToTimeChange: function(field, newValue, oldValue, eOpts) {
        this.loadLogs();
    },

    onButtonClick: function(button, e, eOpts) {
        if(this.queryById('appName').getValue() === null){
            return false;
        }

        this.exportToCSV();
    },

    onGridpanelSelect: function(rowmodel, record, index, eOpts) {
        if(record.length < 1){
            return false;
        }


        this.queryById('getLog').setValue(record.data.get);
        this.queryById('postLog').setValue(record.data.post);
        this.queryById('jsonLog').setValue(record.data.json);
    },

    onGridpanelCellContextMenu: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        e.preventDefault();
        this.logColumnName = e.position.column.dataIndex;
        this.logColumnValue = record.getData()[this.logColumnName];
        this.contextMenu.showAt(e.getXY());
    },

    onGridpanelCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        this.showTextDetailWindow(record.get(e.position.column.dataIndex));
    },

    onGetLogRender: function(component, eOpts) {
        component.el.on('dblclick',this.dblClickField,this,component);
    },

    onPostLogRender: function(component, eOpts) {
        component.el.on('dblclick',this.dblClickField,this,component);
    },

    onPostLogRender1: function(component, eOpts) {
        component.el.on('dblclick',this.dblClickField,this,component);
    },

    loadLogs: function() {
        this.queryById('getLog').setValue("");
        this.queryById('postLog').setValue("");

        var submitData = this.queryById('logSelectPanel').getValues();

        if(!submitData.appName){
            return false;
        }

        var params = {appName:submitData.appName};

        if(submitData.dateFrom){
            params.dateFrom = submitData.dateFrom;
        }

        if(submitData.dateTo){
            params.dateTo = submitData.dateTo;
        }

        if(submitData.timeTo){
            params.timeTo = submitData.timeTo;
        }

        if(submitData.timeFrom){
            params.timeFrom = submitData.timeFrom;
        }

        if(submitData.searchColumn){
            params.searchColumn = submitData.searchColumn;
        }

        if(submitData.searchOperation){
            params.searchOperation = submitData.searchOperation;
        }

        if(submitData.searchTerm){
            params.searchTerm = submitData.searchTerm;
        }


        var logGridStore = this.lookupViewModel().getStore('LogGridStore');

        logGridStore.getProxy().setExtraParams(params);
        logGridStore.loadPage(1);
    },

    setFilterButtonState: function(state, itemId) {
        var button = this.queryById(itemId);
        if(state === 'clear'){
            button.buttonState = 'clear';
            button.setText('Clear');
            button.setIcon('/inc/img/silk_icons/cancel.png');
        } else {
            button.buttonState = 'filter';
            button.setText('Filter');
            button.setIcon('/inc/img/silk_icons/find.png');
        }
    },

    showTextDetailWindow: function(text) {
        if(!this.textWindow){
            this.textWindow = Ext.create('widget.Textdetailwindow');
        }
        this.textWindow.setText(text);
    },

    dblClickField: function(event, el, component) {
        this.showTextDetailWindow(component.getValue());
    },

    exportToCSV: function() {
        var submitData = this.queryById('logSelectPanel').getValues();

        if(!submitData.appName){
            return false;
        }

        var params =

            {
                tab:'log',
                appName:submitData.appName
            };

        if(submitData.dateFrom){
            params.dateFrom = submitData.dateFrom;
        }

        if(submitData.dateTo){
            params.dateTo = submitData.dateTo;
        }

        window.location.href = "exportToCSV?"+ Ext.Object.toQueryString(params);
    }

});