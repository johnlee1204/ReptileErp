/*
 * File: app/view/ApplicationLogs.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Log.view.ApplicationLogs', {
    extend: 'Ext.container.Container',
    alias: 'widget.applicationlogs',

    requires: [
        'Log.view.ApplicationLogsViewModel',
        'Ext.form.Panel',
        'Ext.button.Button',
        'Ext.form.field.Date',
        'Ext.form.field.Time',
        'Ext.form.field.TextArea'
    ],

    viewModel: {
        type: 'applicationlogs'
    },
    defaultListenerScope: true,

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            docFormSkip: true,
            border: false,
            itemId: 'filters',
            margin: '0 0 5px 0',
            padding: 5,
            layout: 'hbox',
            bodyStyle: 'background:none;',
            items: [
                {
                    xtype: 'container',
                    cls: 'floatBox',
                    width: 650,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'container',
                            flex: 1,
                            margin: '0 0 5 0',
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    flex: 1,
                                    itemId: 'appCombo',
                                    margin: '0 5 0 10',
                                    maxWidth: 300,
                                    fieldLabel: 'App',
                                    labelWidth: 60,
                                    anyMatch: true,
                                    displayField: 'app',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    typeAheadDelay: 50,
                                    valueField: 'app',
                                    bind: {
                                        store: '{AppStore}'
                                    },
                                    listeners: {
                                        select: 'onComboboxSelect'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    flex: 1,
                                    itemId: 'searchColumn',
                                    margin: '0 0 0 10',
                                    maxWidth: 300,
                                    fieldLabel: 'Column',
                                    labelWidth: 60,
                                    name: 'searchColumn',
                                    displayField: 'display',
                                    queryMode: 'local',
                                    valueField: 'value'
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            margin: '0 10 0 0',
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    flex: 1,
                                    itemId: 'searchOperation',
                                    margin: '0 0 0 10',
                                    maxWidth: 210,
                                    fieldLabel: 'Operation',
                                    labelWidth: 60,
                                    name: 'searchOperation',
                                    editable: false,
                                    matchFieldWidth: false,
                                    displayField: 'comparison',
                                    valueField: 'value',
                                    bind: {
                                        store: '{OperationStore}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'searchTerm',
                                    margin: '0 10 0 15',
                                    maxHeight: 25,
                                    width: 221,
                                    fieldLabel: 'Term',
                                    labelWidth: 40,
                                    name: 'searchTerm',
                                    enableKeyEvents: true,
                                    listeners: {
                                        keypress: 'onTextfieldKeypress1'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    flex: 1,
                                    itemId: 'filterButton',
                                    margin: '0 0 0 10',
                                    maxWidth: 70,
                                    icon: '/inc/img/silk_icons/find.png',
                                    text: 'Filter',
                                    listeners: {
                                        click: 'onExceptionFilterButtonClick1'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    flex: 1,
                                    itemId: 'filterButton1',
                                    margin: '0 0 0 10',
                                    maxWidth: 70,
                                    icon: '/inc/img/silk_icons/cross.png',
                                    text: 'Clear',
                                    listeners: {
                                        click: 'onExceptionFilterButtonClick11'
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'container',
                    margin: '0 0 0 5px',
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'container',
                            cls: 'floatBox',
                            margin: '0 10 0 0',
                            width: 420,
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'datefield',
                                    itemId: 'dateFrom',
                                    width: 200,
                                    fieldLabel: 'Date From',
                                    labelWidth: 75,
                                    name: 'dateFrom',
                                    submitFormat: 'Y-m-d',
                                    listeners: {
                                        change: 'onDateFromChange1'
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    itemId: 'dateTo',
                                    margin: '0 0 0 25',
                                    width: 200,
                                    fieldLabel: 'Date To',
                                    labelWidth: 65,
                                    name: 'dateTo',
                                    submitFormat: 'Y-m-d',
                                    listeners: {
                                        change: 'onDateToChange1'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            cls: 'floatBox',
                            margin: '0 10 0 0',
                            width: 430,
                            layout: 'hbox',
                            items: [
                                {
                                    xtype: 'timefield',
                                    itemId: 'timeFrom',
                                    margin: '5 0 0 0',
                                    width: 200,
                                    fieldLabel: 'Time From',
                                    labelWidth: 75,
                                    name: 'timeFrom',
                                    value: '0:00',
                                    format: 'G:i',
                                    listeners: {
                                        change: 'onDateFromTimeChange1'
                                    }
                                },
                                {
                                    xtype: 'timefield',
                                    itemId: 'timeTo',
                                    margin: '5 0 0 25',
                                    width: 200,
                                    fieldLabel: 'Time To',
                                    labelWidth: 65,
                                    name: 'timeTo',
                                    value: '23:59',
                                    format: 'G:i',
                                    listeners: {
                                        change: 'onDateToTimeChange1'
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'container',
            html: '<link rel="stylesheet" type="text/css" href="/inc/css/history.css">',
            itemId: 'cssCode'
        },
        {
            xtype: 'container',
            flex: 1,
            itemId: 'results',
            layout: 'fit'
        },
        {
            xtype: 'container',
            itemId: 'dataBoxes',
            margin: '5px',
            resizable: true,
            resizeHandles: 'n',
            layout: 'fit',
            items: [
                {
                    xtype: 'textareafield',
                    frame: false,
                    height: 188,
                    itemId: 'dataBox',
                    fieldLabel: 'Data',
                    labelAlign: 'top',
                    listeners: {
                        afterrender: 'onDataBoxAfterRender'
                    }
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    },

    onComboboxSelect: function(combo, record, eOpts) {
        this.switchAppLog(record.data.app);
    },

    onTextfieldKeypress1: function(textfield, e, eOpts) {
        if(e.getKey() === e.ENTER){
            this.loadAppLog();
        }
    },

    onExceptionFilterButtonClick1: function(button, e, eOpts) {
        this.loadAppLog();
    },

    onExceptionFilterButtonClick11: function(button, e, eOpts) {
        this.clearFilter();
    },

    onDateFromChange1: function(field, newValue, oldValue, eOpts) {
        this.loadAppLog();
    },

    onDateToChange1: function(field, newValue, oldValue, eOpts) {
        this.loadAppLog();
    },

    onDateFromTimeChange1: function(field, newValue, oldValue, eOpts) {
        this.loadAppLog();
    },

    onDateToTimeChange1: function(field, newValue, oldValue, eOpts) {
        this.loadAppLog();
    },

    onDataBoxAfterRender: function(component, eOpts) {
        component.el.on('dblclick',function(event, el, component){
            this.showTextDetailWindow(component.getValue());
        },this,component);
    },

    onPanelAfterRender: function(component, eOpts) {
        if(!this.singleApp){
            this.singleApp = false;
        }

        if(this.hideFilters){
            this.queryById('filters').hide();
        }

        if(this.hideData){
            this.queryById('dataBoxes').hide();
        }

        if(!this.appLocation){
            //If it wasn't defined before rendered.
            this.appLocation = '/Log/';
        }

        this.queryById('dateFrom').setValue(new Date());
        this.queryById('dateTo').setValue(new Date());

        if(!this.singleApp){
            AERP.Ajax.request({
                url:this.appLocation+'readApplicationLogApps',
                success:function(reply){
                    this.lookupViewModel().getStore('AppStore').loadData(reply.appLogApps);
                },
                scope:this
            });
        }else{
            if(!this.hideFilters){
                this.queryById('appCombo').hide();
            }
            this.switchAppLog(this.singleApp,false);
        }
    },

    switchAppLog: function(app, autoLoad) {
        if(typeof autoLoad == 'undefined'){
            autoLoad = true;
        }

        this.mask('Loading...');
        this.logMetadataLoaded = false;
        AERP.Ajax.request({
            url:this.appLocation+'readApplicationLogMetadata',
            params:{appName:app},
            success:function(reply){
                this.unmask();
                this.appName = app;
                this.generateAppLogGrid(reply.columns,reply.table);
                this.fireEvent('logMetadataLoaded');
                this.logMetadataLoaded = true;
                if(autoLoad){
                    this.loadAppLog();
                }
            },
            failure:function(){
                this.unmask();
            },
            scope:this
        });
    },

    showTextDetailWindow: function(text) {
        if(!this.textWindow){
            this.textWindow = Ext.create('Log.view.TextDetailWindow');
        }
        try{
            this.textWindow.setText(JSON.stringify(JSON.parse(text),null,2));
        }catch(e){
            this.textWindow.setText(text);
        }

    },

    generateAppLogGrid: function(columnData, tableData) {
        if(this.gridContextMenu){
            this.gridContextMenu.destroy();
        }
        if(this.paging){
            this.paging.destroy();
        }
        if(this.grid){
            this.grid.destroy();
        }
        if(this.store){
            this.store.removeAll();
            this.store.destroy();
        }
        if(this.columnStore){
            this.columnStore.removeAll();
            this.columnStore.destroy();
        }

        var columnStoreData = [{display:'[ NONE ]',value:''}];
        var fields = [];
        var columns = [];
        for(var i in columnData){
            fields.push({name:columnData[i].column});
            columnStoreData.push({display:columnData[i].label,value:columnData[i].column});
            columns.push({
                dataIndex: columnData[i].column,
                text: columnData[i].label,
                width: columnData[i].width,
                hidden: columnData[i].hidden
            });
        }

        this.columnStore = Ext.create('Ext.data.Store', {
            storeId: 'AppLogColumnStore',
            fields: [
                {name: 'display'},
                {name: 'value'}
            ],
        });
        this.columnStore.loadData(columnStoreData);

        this.queryById('searchColumn').setStore(this.columnStore);

        this.store = Ext.create('Ext.data.Store', {
            storeId: 'AppLogGridStore',
            fields: fields,
            sorters: {
                direction: 'DESC',
                property: 'date'
            },
            pageSize: 100,
            remoteFilter: true,
            remoteSort: true,
            proxy: {
                type: 'ajax',
                noCache: false,
                simpleSortMode: true,
                url: this.appLocation+'readApplicationLog',
                actionMethods: {
                    create: 'POST',
                    read: 'POST',
                    update: 'POST',
                    destroy: 'POST'
                },
                reader: {
                    type: 'array',
                    rootProperty: 'data',
                    totalProperty: 'totalRows'
                }
            }
        });

        this.paging = Ext.create('Ext.toolbar.Paging',{
            dock:'top',
            displayInfo:true
        });

        this.gridContextMenu = Ext.create('Ext.menu.Menu',{
            itemId: 'contextMenu',
            width: 120,
            items: [
                {
                    xtype: 'menuitem',
                    itemId: 'gridContextMenuFilter',
                    icon: '/inc/img/silk_icons/find.png',
                    text: 'Filter',
                    listeners: {
                        click: function(){
                            if(this.menuFilterColumn === 'date'){
                                this.queryById('dateTo').setValue(this.menuFilterTerm.substr(0,10));
                                this.queryById('timeTo').setValue(this.menuFilterTerm.substr(11,5));
                            } else {
                                this.queryById('searchColumn').setValue(this.menuFilterColumn);
                                this.queryById('searchOperation').setValue('=');
                                this.queryById('searchTerm').setValue(this.menuFilterTerm);
                            }

                            this.loadAppLog();
                        },
                        scope:this
                    }
                },{
                    xtype: 'menuitem',
                    itemId: 'gridContextMenuJob',
                    icon: '/inc/img/silk_icons/application_cascade.png',
                    text: 'View Job',
                    listeners: {
                        click: function(){
                            window.open('/job?job='+this.menuFilterTerm,'_blank');
                        },
                        scope:this
                    }
                }
            ]
        });

        if(!this.expanderTemplate){
            this.expanderTemplate = Ext.create('Ext.XTemplate', '{[this.formatChanges(values)]}', {
                formatChanges: function(rowData) {
                    var table = '';

                    var changes;
                    try{ changes = Ext.JSON.decode(rowData.changes); }catch(ex){ changes = false; }
                    if(changes !== false){
                        table += '<table class="historyTable">';
                        table +='<tr><th class="historyField">Field</th> <th class="historyBefore">Before</th> <th class="historyAfter">After</th></tr>';
                        for(var field in changes){
                            table +='<tr>';
                            table +='<td>';
                            table +=field;
                            table +='</td>';
                            table +='<td>';
                            table +=changes[field].before;
                            table +='</td>';
                            table +='<td>';
                            table +=changes[field].after;
                            table +='</td>';
                            table +='</tr>';
                        }
                        table +='</table>';
                    }

                    var logData;
                    try{ logData = Ext.JSON.decode(rowData.data); } catch(ex){logData = false; }
                    if(logData !== false){

                        table += '<table class="historyTable">';
                        table +='<tr><th class="historyField">Data</th> <th class="historyBefore">Value</th></tr>';
                        for(var column in logData){
                            table +='<tr>';
                            table +='<td>';
                            table +=column;
                            table +='</td>';
                            table +='<td>';
                            table +=logData[column];
                            table +='</td>';
                            table +='</tr>';
                        }
                        table +='</table>';
                    }

                    return table;
                }
            });
        }

        var plugins = [];
        if(tableData.comparison){
            plugins.push({
                ptype: 'rowexpander',
                expandOnEnter: true,
                rowBodyTpl: this.expanderTemplate,
                selectRowOnExpand: true
            });
        }

        this.grid = Ext.create('Ext.grid.Panel', {
            store: this.store,
            columns:columns,
            viewConfig: {
                enableTextSelection: true
            },
            listeners:{
                selectionchange:function(model, selected, eOpts){
                    if(selected.length !== 1){
                        return;
                    }
                    if(selected[0].data.data){
                        try{
                            this.queryById('dataBox').setValue(JSON.stringify(JSON.parse(selected[0].data.data),null,2));
                        }catch(e){
                            this.queryById('dataBox').setValue(selected[0].data.data);
                        }
                    }
                },
                celldblclick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
                    this.menuFilterColumn = e.position.column.dataIndex;
                    this.menuFilterTerm = record.getData()[this.menuFilterColumn];
                    if(typeof this.menuFilterTerm == 'undefined'){ //Happens when dbl clicking margins (Those aren't cells!)
                        return;
                    }
                    var termLength = this.menuFilterTerm.length;
                    if((termLength === 5 || termLength === 10) && this.menuFilterColumn.toLowerCase().includes('job')){
                        window.open('/job?job='+this.menuFilterTerm,'_blank');
                        return;
                    }
                },
                cellcontextmenu:function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
                    e.preventDefault();
                    this.menuFilterColumn = e.position.column.dataIndex;
                    this.menuFilterTerm = record.getData()[this.menuFilterColumn];
                    var termLength = this.menuFilterTerm.length;
                    var gridContextMenuJob = this.gridContextMenu.queryById('gridContextMenuJob');
                    var menuLength = 0;
                    gridContextMenuJob.hide();
                    if((termLength === 5 || termLength === 10) && this.menuFilterColumn.toLowerCase().includes('job')){
                        gridContextMenuJob.show();
                        menuLength++;
                    }
                    var gridContextMenuFilter = this.gridContextMenu.queryById('gridContextMenuFilter');
                    gridContextMenuFilter.hide();
                    if(!this.hideFilters){
                        gridContextMenuFilter.show();
                        menuLength++;
                    }
                    if(menuLength <= 0){
                        return;
                    }
                    this.gridContextMenu.showAt(e.getXY());
                },
                scope:this
            },
            plugins: plugins,
            dockedItems: [this.paging]
        });

        this.queryById('results').add(this.grid);
    },

    loadAppLog: function() {
        if(!this.appName){
            this.loadWhenReady = true;
            return;
        }

        this.queryById('dataBox').setValue("");

        var filterData = this.queryById('filters').getValues();
        if(this.manualFilters){
            filterData = this.manualFilters;
        }

        var params = {appName:this.appName};

        if(filterData.dateFrom){
            params.dateFrom = filterData.dateFrom;
        }

        if(filterData.dateTo){
            params.dateTo = filterData.dateTo;
        }

        if(filterData.timeTo){
            params.timeTo = filterData.timeTo;
        }

        if(filterData.timeFrom){
            params.timeFrom = filterData.timeFrom;
        }


        if(filterData.searchColumn && filterData.searchColumn !== ''){
            if(filterData.searchOperation && filterData.searchTerm){
                params.searchColumn = filterData.searchColumn;
                params.searchOperation = filterData.searchOperation;
                params.searchTerm = filterData.searchTerm;
            }
        }

        this.store.getProxy().setExtraParams(params);
        this.store.loadPage(1);
    },

    clearFilter: function() {
        this.queryById('searchColumn').setValue('');
        this.queryById('searchOperation').setValue('');
        this.queryById('searchTerm').setValue('');
        this.loadAppLog();
    },

    changeAppLocation: function(folder) {
        //This function is used for InventoryLog so we can use slightly modified functions to force the loading of one specific log.
        //Kind of a temp thing until we finalize showing different logs to different people, etc.
        this.appLocation = folder;
    }

});