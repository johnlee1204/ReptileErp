/*
 * File: app/view/MainView.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Log.view.MainView', {
    extend: 'Ext.container.Viewport',
    alias: 'widget.mainview',

    requires: [
        'Log.view.MainViewViewModel',
        'Log.view.Exceptions',
        'Log.view.AccessLogs',
        'Ext.toolbar.Toolbar',
        'Ext.tab.Panel',
        'Ext.tab.Tab',
        'Ext.menu.Menu',
        'Ext.menu.Item'
    ],

    viewModel: {
        type: 'mainview'
    },
    itemId: 'MainView',
    defaultListenerScope: true,

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'usertoolbar'
        },
        {
            xtype: 'tabpanel',
            flex: 1,
            frame: true,
            itemId: 'tabPanel',
            title: '',
            activeTab: 0,
            plain: true,
            items: [
                {
                    xtype: 'exceptions'
                },
                {
                    xtype: 'accesslogs',
                    itemId: 'accessLogs'
                }
            ],
            listeners: {
                afterrender: 'onMainViewAfterRender'
            }
        },
        {
            xtype: 'menu',
            itemId: 'contextMenu',
            width: 120,
            items: [
                {
                    xtype: 'menuitem',
                    icon: '/inc/img/silk_icons/find.png',
                    text: 'Filter',
                    listeners: {
                        click: 'onMenuitemClick'
                    }
                }
            ]
        }
    ],

    onMainViewAfterRender: function(component, eOpts) {
        this.loadAppData();
    },

    onMenuitemClick: function(item, e, eOpts) {
        if(this.queryById('tabPanel').getActiveTab().title === 'Exceptions'){
            var exceptions = this.queryById('Exceptions');

            var searchColumn = exceptions.queryById('searchColumnException');
            var searchTerm = exceptions.queryById('searchTermException');
            var searchOperation = exceptions.queryById('searchOperationException');

            if(exceptions.exceptionColumnName === 'date'){
                exceptions.queryById('dateToException').setValue(exceptions.exceptionColumnValue.substr(0,10));
                exceptions.queryById('timeToException').setValue(exceptions.exceptionColumnValue.substr(11,5));
                exceptions.loadExceptions();
            } else {
                exceptions.queryById('searchColumnException').setValue(exceptions.exceptionColumnName);
                var searchTerm = exceptions.queryById('searchTermException');
                var searchOperation = exceptions.queryById('searchOperationException');
                searchOperation.setDisabled(false);
                searchOperation.setValue('=');
                searchTerm.setValue(exceptions.exceptionColumnValue);
                searchTerm.setDisabled(false);
                exceptions.queryById('exceptionFilterButton').setDisabled(false);
                exceptions.exceptionFilterColumn = searchColumn.getValue();
                exceptions.exceptionFilterOperation = searchOperation.getValue();
                exceptions.exceptionFilterTerm = searchTerm.getValue();
                if(exceptions.exceptionFilterColumn !== ""){
                   exceptions.loadExceptions();
                   exceptions.setFilterButtonState('clear','exceptionFilterButton');
                }else {
                   Ext.Msg.alert("Error","No Filter Set");
                   return false;
                }
            }
        } else {
            var access = this.queryById('accessLogs');

            var searchColumn = access.queryById('searchColumnLog');
            var searchTerm = access.queryById('searchTermLog');
            var searchOperation = access.queryById('searchOperationLog');

            if(access.logColumnName === 'date'){
                access.queryById('dateToLog').setValue(access.logColumnValue.substr(0,10));
                access.queryById('timeToLog').setValue(access.logColumnValue.substr(11,5));
                access.loadLogs();
            } else {
                access.queryById('searchColumnLog').setValue(access.logColumnName);
                var searchTerm = access.queryById('searchTermLog');
                var searchOperation = access.queryById('searchOperationLog');
                searchOperation.setDisabled(false);
                searchOperation.setValue('=');
                searchTerm.setValue(access.logColumnValue);
                searchTerm.setDisabled(false);
                access.queryById('logFilterButton').setDisabled(false);
                access.logFilterColumn = searchColumn.getValue();
                access.logFilterOperation = searchOperation.getValue();
                access.logFilterTerm = searchTerm.getValue();
                if(access.logFilterColumn !== ""){
                   access.loadLogs();
                   access.setFilterButtonState('clear','logFilterButton');
                }else {
                   Ext.Msg.alert("Error","No Filter Set");
                   return false;
                }
            }

        }
    },

    loadAppData: function() {
        let exceptions = this.queryById('Exceptions');
        exceptions.maskFilters();
        exceptions.loadExceptions();

        let accessLog = this.queryById('accessLogs');

        AERP.Ajax.request({
            url:'/Log/getAppData',
            success:function(reply){

                exceptions.appData = reply;
                accessLog.appData = reply;

                let contextMenu = this.queryById('contextMenu');
                exceptions.contextMenu = contextMenu;
                accessLog.contextMenu = contextMenu;

                exceptions.getViewModel().getStore('ExceptionComboStore').loadData(reply.exceptionData);
                accessLog.getViewModel().getStore('LogComboStore').loadData(reply.logData);
                exceptions.getViewModel().getStore('ExceptionColumnStore').loadData(reply.exceptionColumns);
                accessLog.getViewModel().getStore('LogColumnStore').loadData(reply.logColumns);

                accessLog.queryById('appName').setValue('[ ALL ]','[ ALL ]');
                exceptions.queryById('appSelection').setValue('[ ALL ]','[ ALL ]');

                exceptions.unmaskFilters();
            },
            failure:function(reason){
                exceptions.unmask();
            },
            scope:this
        });
    }

});