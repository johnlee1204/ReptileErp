/*
 * File: app/view/UserToolbarSetup.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('UserToolbar.view.UserToolbarSetup', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.usertoolbarsetup',

	requires: [
		'UserToolbar.view.UserToolbarSetupViewModel',
		'Ext.grid.Panel',
		'Ext.toolbar.Toolbar',
		'Ext.grid.column.Column',
		'Ext.view.Table'
	],

	viewModel: {
		type: 'usertoolbarsetup'
	},
	height: 600,
	width: 600,
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'container',
			flex: 1,
			layout: {
				type: 'hbox',
				align: 'stretch'
			},
			items: [
				{
					xtype: 'gridpanel',
					flex: 1,
					itemId: 'allLinkGrid',
					title: 'All Links',
					bind: {
						store: '{AllLinksStore}'
					},
					dockedItems: [
						{
							xtype: 'toolbar',
							dock: 'top',
							itemId: 'allLinkToolbar'
						}
					],
					columns: [
						{
							xtype: 'gridcolumn',
							flex: 1,
							dataIndex: 'linkName',
							text: 'App Name'
						},
						{
							xtype: 'gridcolumn',
							dataIndex: 'category',
							text: 'Category'
						}
					]
				},
				{
					xtype: 'gridpanel',
					flex: 1,
					itemId: 'userLinkGrid',
					title: 'My Links',
					bind: {
						store: '{UserLinksStore}'
					},
					dockedItems: [
						{
							xtype: 'toolbar',
							dock: 'top',
							itemId: 'userLinkToolbar'
						}
					],
					columns: [
						{
							xtype: 'gridcolumn',
							flex: 1,
							dataIndex: 'linkName',
							text: 'App Name'
						},
						{
							xtype: 'gridcolumn',
							dataIndex: 'category',
							text: 'Category'
						}
					]
				}
			]
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onPanelAfterRender: function(component, eOpts) {
		this.fireEvent('appdataloaded');
		this.buildNiceGridMenus();
	},

	buildNiceGridMenus: function() {
		Ext.create('NiceGridMenu', {
			menuItems:[{text:'Add Link', action:'addLink', icon:'/inc/img/silk_icons/add.png', disabled:true}],
			callbackHandler:function(action, data) {
				switch(action) {
					case 'addLink':
						this.addUserLink(data.toolbarLinkId);
						break;
				}
			},
			doubleClick:'addLink',
			grid:this.queryById('allLinkGrid'),
			toolbar:this.queryById('allLinkToolbar'),
			filterField:true,
			scope:this
		});

		Ext.create('NiceGridMenu', {
			menuItems:[{text:'Remove Link', action:'removeLink', icon:'/inc/img/silk_icons/delete.png', disabled:true}],
			callbackHandler:function(action, data) {
				switch(action) {
					case 'removeLink':
						this.removeUserLink(data.userToolbarLinkId);
						break;
				}
			},
			doubleClick:'removeLink',
			grid:this.queryById('userLinkGrid'),
			toolbar:this.queryById('userLinkToolbar'),
			filterField:true,
			scope:this
		});
	},

	readAllLinks: function() {
		AERP.Ajax.request({
			url:'/UserToolbar/readAllUnusedLinks',
			jsonData:{userId:this.userId},
			success:function(reply) {
				this.getViewModel().getStore('AllLinksStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	readUserLinks: function(userId) {
		AERP.Ajax.request({
			url:'/UserToolbar/readUserLinks',
			jsonData:{userId:userId},
			success:function(reply) {
				this.userId = userId;
				this.readAllLinks(userId);
				this.getViewModel().getStore('UserLinksStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	addUserLink: function(toolbarLinkId) {
		AERP.Ajax.request({
			url:'/UserToolbar/addUserLink',
			jsonData:{userId:this.userId, toolbarLinkId:toolbarLinkId},
			success:function(reply) {
				this.readUserLinks(this.userId);
				this.fireEvent('userlinkchange');
			},
			scope:this,
			mask:this
		});
	},

	removeUserLink: function(userToolbarLinkId) {
		AERP.Ajax.request({
			url:'/UserToolbar/removeUserLink',
			jsonData:{userToolbarLinkId:userToolbarLinkId},
			success:function(reply) {
				this.readUserLinks(this.userId);
				this.fireEvent('userlinkchange');
			},
			scope:this,
			mask:this
		});
	}

});