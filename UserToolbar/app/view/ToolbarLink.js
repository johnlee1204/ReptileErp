/*
 * File: app/view/ToolbarLink.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('UserToolbar.view.ToolbarLink', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.toolbarlink',

	requires: [
		'UserToolbar.view.ToolbarLinkViewModel',
		'UserToolbar.view.ToolbarLinkForm',
		'Ext.grid.Panel',
		'Ext.toolbar.Toolbar',
		'Ext.grid.column.Column',
		'Ext.view.Table'
	],

	viewModel: {
		type: 'toolbarlink'
	},
	frame: true,
	minHeight: 500,
	minWidth: 500,
	title: 'Toolbar Links',
	defaultListenerScope: true,

	layout: {
		type: 'hbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'gridpanel',
			itemId: 'toolbarLinkGrid',
			width: 320,
			bind: {
				store: '{ToolbarLinkStore}'
			},
			dockedItems: [
				{
					xtype: 'toolbar',
					dock: 'top',
					itemId: 'toolbarLinkToolbar'
				}
			],
			columns: [
				{
					xtype: 'gridcolumn',
					width: 175,
					dataIndex: 'linkName',
					text: 'Link Name'
				},
				{
					xtype: 'gridcolumn',
					width: 121,
					dataIndex: 'linkCategory',
					text: 'Link Category'
				}
			],
			listeners: {
				selectionchange: 'onGridpanelSelectionChange'
			}
		},
		{
			xtype: 'toolbarlinkform',
			flex: 1,
			itemId: 'toolbarLinkForm',
			listeners: {
				toolbarlinkchange: 'onPanelToolbarlinkChange'
			}
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onGridpanelSelectionChange: function(model, selected, eOpts) {
		if(selected.length !== 1) {
			return;
		}

		selected = selected[0];

		this.queryById('toolbarLinkForm').readToolbarLink(selected.data.toolbarLinkId);
	},

	onPanelToolbarlinkChange: function(panel) {
		this.readToolbarLinks();
	},

	onPanelAfterRender: function(component, eOpts) {
		this.readToolbarLinks();

		Ext.create("NiceGridMenu", {
			grid:this.queryById('toolbarLinkGrid'),
			toolbar:this.queryById('toolbarLinkToolbar'),
			filterField:true,
			scope:this
		});
	},

	readToolbarLinks: function() {
		AERP.Ajax.request({
			url:'/UserToolbar/readToolbarLinks',
			success:function(reply) {
				this.getViewModel().getStore('ToolbarLinkStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	}

});