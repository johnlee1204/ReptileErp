/*
 * File: app/view/TransactionForm.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Finance.view.TransactionForm', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.transactionform',

	mixins: [
		'DocForm'
	],
	requires: [
		'Finance.view.TransactionFormViewModel',
		'Ext.toolbar.Toolbar',
		'Ext.form.field.ComboBox',
		'Ext.form.field.Date',
		'Ext.form.field.TextArea'
	],

	viewModel: {
		type: 'transactionform'
	},
	bodyPadding: 10,
	bodyStyle: 'background:none',
	defaultListenerScope: true,

	dockedItems: [
		{
			xtype: 'toolbar',
			dock: 'top',
			itemId: 'transactionFormToolbar'
		}
	],
	items: [
		{
			xtype: 'combobox',
			itemId: 'type',
			fieldLabel: 'Type',
			value: 'Expense',
			displayField: 'type',
			forceSelection: true,
			queryMode: 'local',
			valueField: 'type',
			bind: {
				store: '{TypeStore}'
			}
		},
		{
			xtype: 'textfield',
			formatCurrency: true,
			itemId: 'amount',
			fieldLabel: 'Amount'
		},
		{
			xtype: 'datefield',
			itemId: 'transactionDate',
			fieldLabel: 'Date',
			format: 'Y-m-d',
			listeners: {
				afterrender: 'onTransactionDateAfterRender'
			}
		},
		{
			xtype: 'combobox',
			itemId: 'category',
			fieldLabel: 'Category',
			displayField: 'category',
			forceSelection: true,
			queryMode: 'local',
			valueField: 'category',
			bind: {
				store: '{CategoryStore}'
			},
			listeners: {
				afterrender: 'onCategoryAfterRender'
			}
		},
		{
			xtype: 'textareafield',
			itemId: 'notes',
			fieldLabel: 'Notes'
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onTransactionDateAfterRender: function(component, eOpts) {
		component.el.on('dblclick', function() {
			component.setValue(new Date());
		});
	},

	onCategoryAfterRender: function(component, eOpts) {
		AppWindowManager.appOn('dropDownSelectionEditor', {
			scope:this,
			selectionchanged:function() {
				this.readCategories();
			}
		});

		component.el.on({
		    contextmenu: function(event) {
		        event.stopEvent();
		        AppWindowManager.appLink('dropDownSelectionEditor', {dataKey:'financeCategory'});
		    },
		    scope:this
		});

	},

	onPanelAfterRender: function(component, eOpts) {
		this.docFormInit({
			toolbarId:'transactionFormToolbar',
			addFn:'createTransaction',
			saveFn:'updateTransaction',
			deleteFn:'deleteTransaction'
		});

		this.readCategories();
	},

	readTransaction: function(ledgerId) {
		AERP.Ajax.request({
			url:'/Finance/readTransaction',
			jsonData:{ledgerId:ledgerId},
			success:function(reply) {
				this.ledgerId = ledgerId;
				this.docFormLoadFormData(reply);
			},
			scope:this,
			mask:this
		});
	},

	createTransaction: function() {
		AERP.Ajax.request({
			url:'/Finance/createTransaction',
			jsonData:this.docFormGetAllFieldValues(),
			success:function(reply) {
				this.readTransaction(reply.data);
				this.fireEvent('ledgerchanged');
			},
			scope:this,
			mask:this
		});
	},

	updateTransaction: function() {
		let jsonData = this.docFormGetAllFieldValues();
		jsonData.ledgerId = this.ledgerId;

		AERP.Ajax.request({
			url:'/Finance/updateTransaction',
			jsonData:jsonData,
			success:function(reply) {
				this.readTransaction(this.ledgerId);
				this.fireEvent('ledgerchanged');
			},
			scope:this,
			mask:this
		});
	},

	deleteTransaction: function() {
		AERP.Ajax.request({
			url:'/Finance/deleteTransaction',
			jsonData:{ledgerId:this.ledgerId},
			success:function(reply) {
				this.ledgerId = null;
				this.docFormReset();
				this.fireEvent('ledgerchanged');
			},
			scope:this,
			mask:this
		});
	},

	readCategories: function() {
		AERP.Ajax.request({
			url:'/DropDownSelectionEditor/readSelectionsForCombo',
			jsonData:{selectionKey:'financeCategory'},
			success:function(reply) {
				this.getViewModel().getStore('CategoryStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	}

});