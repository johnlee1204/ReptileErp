/*
 * File: app/view/Finance.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Finance.view.Finance', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.finance',

	requires: [
		'Finance.view.FinanceViewModel',
		'Finance.view.TransactionForm',
		'Ext.form.field.Text',
		'Ext.grid.Panel',
		'Ext.grid.column.Date',
		'Ext.view.Table'
	],

	viewModel: {
		type: 'finance'
	},
	frame: true,
	minHeight: 500,
	minWidth: 500,
	title: 'Finance',
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'container',
			items: [
				{
					xtype: 'textfield',
					itemId: 'currentBalance',
					margin: 10,
					fieldLabel: 'Current Balance',
					readOnly: true
				}
			]
		},
		{
			xtype: 'container',
			flex: 1,
			layout: {
				type: 'hbox',
				align: 'stretch'
			},
			items: [
				{
					xtype: 'gridpanel',
					flex: 1,
					itemId: 'ledgerGrid',
					bind: {
						store: '{LedgerStore}'
					},
					columns: [
						{
							xtype: 'gridcolumn',
							renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
								return Ext.util.Format.currency(value, "$", 2);
							},
							dataIndex: 'amount',
							text: 'Amount'
						},
						{
							xtype: 'datecolumn',
							width: 129,
							dataIndex: 'date',
							text: 'Date',
							format: 'F j, Y'
						},
						{
							xtype: 'gridcolumn',
							dataIndex: 'name',
							text: 'Entered By'
						},
						{
							xtype: 'gridcolumn',
							width: 300,
							dataIndex: 'notes',
							text: 'Notes'
						}
					],
					listeners: {
						selectionchange: 'onLedgerGridSelectionChange'
					}
				},
				{
					xtype: 'transactionform',
					flex: 1,
					itemId: 'transactionForm',
					listeners: {
						ledgerchanged: 'onPanelLedgerChangeD'
					}
				}
			]
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onLedgerGridSelectionChange: function(model, selected, eOpts) {
		if(!selected || selected.length !== 1) {
			return;
		}

		selected = selected[0];

		this.queryById('transactionForm').readTransaction(selected.data.ledgerId);
	},

	onPanelLedgerChangeD: function(panel) {
		this.readLedger();
	},

	onPanelAfterRender: function(component, eOpts) {
		this.readLedger();
	},

	readLedger: function() {
		AERP.Ajax.request({
			url:'/Finance/readLedger',
			success:function(reply) {
				this.getViewModel().getStore('LedgerStore').loadData(reply.data);
				this.queryById('currentBalance').setValue(Ext.util.Format.currency(reply.currentBalance, "$", 2));
			},
			scope:this,
			mask:this
		});
	}

});