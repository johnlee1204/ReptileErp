/*
 * File: app/view/GroupManagerPanel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GroupManager.view.GroupManagerPanel', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.groupmanagerpanel',

	requires: [
		'GroupManager.view.GroupManagerPanelViewModel',
		'Ext.grid.Panel',
		'Ext.view.Table',
		'Ext.toolbar.Toolbar',
		'Ext.button.Button',
		'Ext.toolbar.Spacer',
		'Ext.selection.RowModel',
		'Ext.form.Panel',
		'Ext.form.field.Display',
		'Ext.form.field.Text',
		'Ext.grid.column.Check'
	],

	viewModel: {
		type: 'groupmanagerpanel'
	},
	height: 407,
	width: 782,
	title: '',
	defaultListenerScope: true,

	layout: {
		type: 'hbox',
		align: 'stretch'
	},
	listeners: {
		render: 'onPanelRender'
	},

	initConfig: function(instanceConfig) {
		var me = this,
			config = {
				items: [
					{
						xtype: 'gridpanel',
						flex: 1,
						itemId: 'groupGrid',
						title: '',
						forceFit: true,
						store: 'GroupStore',
						dockedItems: [
							{
								xtype: 'toolbar',
								dock: 'top',
								items: [
									{
										xtype: 'button',
										icon: '/inc/img/silk_icons/add.png',
										text: 'Add New Usergroup',
										listeners: {
											click: 'onButtonClick'
										}
									},
									{
										xtype: 'tbspacer',
										flex: 1
									}
								]
							}
						],
						selModel: Ext.create('Ext.selection.RowModel', {
							selType: 'rowmodel',
							mode: 'SINGLE',
							listeners: {
								select: 'onRowModelSelect'
							}
						}),
						columns: [
							{
								xtype: 'gridcolumn',
								dataIndex: 'groupName',
								text: 'GroupName'
							}
						]
					},
					{
						xtype: 'panel',
						border: false,
						itemId: 'editPanel',
						width: 422,
						layout: 'fit',
						title: '',
						listeners: {
							render: 'onWindowRender'
						},
						items: [
							{
								xtype: 'form',
								frame: true,
								itemId: 'editGroupFormPanel',
								bodyPadding: 10,
								title: '',
								layout: {
									type: 'vbox',
									align: 'stretch'
								},
								dockedItems: [
									{
										xtype: 'toolbar',
										flex: 1,
										dock: 'top',
										items: [
											{
												xtype: 'button',
												disabled: true,
												itemId: 'saveGroupBtn',
												icon: '/inc/img/silk_icons/disk.png',
												text: 'Save',
												listeners: {
													click: 'onSaveGroupBtnClick'
												}
											},
											{
												xtype: 'button',
												icon: '/inc/img/silk_icons/cancel.png',
												text: 'Cancel',
												listeners: {
													click: 'onButtonClick1'
												}
											},
											{
												xtype: 'tbspacer',
												flex: 1
											},
											{
												xtype: 'button',
												itemId: 'deleteGroupBtn',
												icon: '/inc/img/silk_icons/delete.png',
												text: 'Delete Group',
												listeners: {
													click: 'onDeleteGroupBtnClick'
												}
											}
										]
									}
								],
								items: [
									{
										xtype: 'displayfield',
										itemId: 'editGroupIdField',
										fieldLabel: 'Group Id',
										labelWidth: 80,
										name: 'editGroupIdField'
									},
									{
										xtype: 'textfield',
										validator: function(value) {
											//Match 3 or more alpha numeric. I think sencha has prebuilt validators, but I'm already thinking regex, so whatever.
											//Sencha's editor reads regex? coooool!
											if(/^[a-z,A-Z,0-9, ]{3,50}$/.test(value) === false) {
											return "Must be at 3-50 alpha-numeric characters or spaces.";
										}
										return true;
										},
										itemId: 'editGroupNameField',
										width: 470,
										fieldLabel: 'Group Name',
										labelWidth: 80,
										name: 'editGroupNameField',
										allowOnlyWhitespace: false
									},
									{
										xtype: 'gridpanel',
										flex: 1,
										itemId: 'groupPermissionsGrid',
										title: 'Group Permissions',
										store: 'GroupPermissionsStore',
										columns: [
											{
												xtype: 'gridcolumn',
												flex: 1,
												dataIndex: 'appClass',
												text: 'App Name'
											},
											{
												xtype: 'checkcolumn',
												width: 50,
												dataIndex: 'permissionCreate',
												text: 'Create'
											},
											{
												xtype: 'checkcolumn',
												width: 50,
												dataIndex: 'permissionRead',
												text: 'Read'
											},
											{
												xtype: 'checkcolumn',
												width: 50,
												dataIndex: 'permissionUpdate',
												text: 'Update'
											},
											{
												xtype: 'checkcolumn',
												width: 50,
												dataIndex: 'permissionDelete',
												text: 'Delete'
											}
										]
									}
								],
								listeners: {
									validitychange: 'onNewGroupFormPanelValidityChange'
								}
							}
						]
					}
				]
			};
		if (instanceConfig) {
			me.self.getConfigurator().merge(me, config, instanceConfig);
		}
		return me.callParent([config]);
	},

	onPanelRender: function(component, eOpts) {
		this.reloadGroupGrid();
		this.queryById('editPanel').hide();
	},

	onButtonClick: function(button, e, eOpts) {
		var groupGrid = this.queryById("groupGrid");
		var groupGridStore = groupGrid.getStore();

		this.setLoading("Adding...");
		AERP.Ajax.request({
		    url:'/UserGroup/addGroup',
		    //params:groupPanelForm.getValues(),
		    success:function(reply){
		        this.setLoading(false);
		        groupGridStore.loadData(reply.groups);
		        var newGroupGridIndex = groupGridStore.find('groupId',reply.newGroupId);
		        this.showEditPanel(groupGridStore.getAt(newGroupGridIndex).get("groupId"));
		    },
		    failure:function(){
		        this.setLoading(false);
		    },
		    scope:this
		});

	},

	onRowModelSelect: function(rowmodel, record, index, eOpts) {
		var groupGrid = this.queryById("groupGrid");
		var editGroupId = record.get('groupId');
		this.showEditPanel(editGroupId);
	},

	onWindowRender: function(component, eOpts) {
		this.queryById("editGroupNameField").focus();
	},

	onSaveGroupBtnClick: function(button, e, eOpts) {
		var groupPanel = this.queryById("editGroupFormPanel");
		var groupPanelForm = groupPanel.getForm();

		var permissionGrid = this.queryById("groupPermissionsGrid");
		var changedPermissions = [];
		permissionGrid.getStore().each(function(row){
		    if(row.isModified('permissionCreate') || row.isModified('permissionRead') || row.isModified('permissionUpdate') || row.isModified('permissionDelete')){
		        changedPermissions.push(row.getData());
		    }
		},this);


		this.setLoading("Saving...");

		var formValues = groupPanelForm.getValues(false,false,true);
		formValues.editGroupIdField = this.activeGroupId;

		AERP.Ajax.request({
		    url:'/UserGroup/editGroup',
		    params:{groupInfo:JSON.stringify(formValues),groupPermissions:JSON.stringify(changedPermissions)},
		    success:function(reply){
		        this.setLoading(false);
		        this.queryById("groupGrid").getStore().loadData(reply.groups);
		        this.hideEditPanel();
		    },
		    failure:function(){
		        this.setLoading(false);
		    },
		    scope:this
		});
	},

	onButtonClick1: function(button, e, eOpts) {
		this.hideEditPanel();
	},

	onDeleteGroupBtnClick: function(button, e, eOpts) {
		var theRealThis = this;
		Ext.Msg.confirm('Careful!','Are you sure you wish to delete the "'+this.queryById('editGroupNameField').getValue()+'" group?',function(choice){
		    if(choice === 'yes'){
		        theRealThis.deleteGroup();
		    }
		});
	},

	onNewGroupFormPanelValidityChange: function(basic, valid, eOpts) {
		var saveGroupBtn = this.queryById("saveGroupBtn");
		if(valid){
		    saveGroupBtn.enable();
		}else{
		    saveGroupBtn.disable();
		}
	},

	reloadGroupGrid: function() {
		AERP.Ajax.request({
		    url:'/UserGroup/getGroupList',
		    success:function(reply){
		        this.queryById("groupGrid").getStore().loadData(reply.groups);
		    },
		    scope:this
		});
	},

	showEditPanel: function(groupId) {
		var groupGridStore = this.queryById("groupGrid").getStore();
		var groupGridIndex = groupGridStore.find('groupId',groupId);
		var groupName = groupGridStore.getAt(groupGridIndex).get("groupName");

		this.queryById('editGroupFormPanel').getForm().reset();
		this.queryById('editGroupIdField').setValue(groupId);
		this.activeGroupId = groupId;
		this.queryById('editGroupNameField').setValue(groupName);
		this.loadPermissionsGridForGroup(groupId);

		this.queryById('editPanel').show();

	},

	hideEditPanel: function() {
		this.queryById('editPanel').hide();
		this.queryById('editGroupFormPanel').getForm().reset();
		this.queryById('groupPermissionsGrid').getStore().removeAll();
		this.queryById('groupGrid').getSelectionModel().deselectAll();
		this.activeGroupId = null;
	},

	loadPermissionsGridForGroup: function(groupId) {
		AERP.Ajax.request({
		    url:'/UserGroup/getGroupPermissions',
		    params:{groupId:groupId},
		    success:function(reply){
		        this.queryById('groupPermissionsGrid').getStore().loadData(reply.groupPermissions);
		    },
		    failure:function(){

		    },
		    scope:this
		});
	},

	deleteGroup: function() {
		var groupGrid = this.queryById("groupGrid");

		this.setLoading("Deleting...");
		AERP.Ajax.request({
		    url:'/UserGroup/deleteGroup',
		    params:{'groupId':this.activeGroupId},
		    success:function(reply){
		        this.setLoading(false);
		        groupGrid.getStore().loadData(reply.groups);
		        this.hideEditPanel();
		    },
		    failure:function(){
		        this.setLoading(false);
		    },
		    scope:this
		});
	}

});