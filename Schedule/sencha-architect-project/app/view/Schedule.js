/*
 * File: app/view/Schedule.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Schedule.view.Schedule', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.schedule',

	requires: [
		'Schedule.view.ScheduleViewModel',
		'Schedule.view.LaborForm',
		'Ext.tab.Panel',
		'Ext.tab.Tab',
		'Ext.calendar.panel.Panel',
		'Ext.calendar.panel.Month',
		'Ext.calendar.view.Month',
		'Ext.button.Segmented',
		'Ext.grid.Panel',
		'Ext.grid.column.Date',
		'Ext.view.Table',
		'Ext.toolbar.Toolbar'
	],

	viewModel: {
		type: 'schedule'
	},
	frame: true,
	minHeight: 500,
	minWidth: 500,
	title: 'Schedule',
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'tabpanel',
			flex: 1,
			bodyStyle: 'background:none',
			activeTab: 0,
			items: [
				{
					xtype: 'panel',
					flex: 1,
					bodyStyle: 'background:none',
					title: 'Schedule',
					layout: {
						type: 'vbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'calendar',
							flex: 1,
							itemId: 'calendar',
							store: 'ScheduleCalandarStore',
							views: {
								month: {
									xtype: 'calendar-month',
									label: 'Month',
									listeners: {
										beforeeventadd: 'onCalendarmonthBeforeEventadd',
										beforeeventedit: 'onCalendarmonthBeforeEventedit',
										eventdrop: 'onCalendarmonthEventdrop'
									},
									view: {
										xtype: 'calendar-monthview',
										addForm: {
											xtype: 'addeventform'
										},
										editForm: {
											xtype: 'addeventform'
										}
									}
								}
							},
							switcher: {
								xtype: 'segmentedbutton',
								hidden: true
							}
						}
					]
				},
				{
					xtype: 'panel',
					bodyStyle: 'background:none',
					title: 'Labor History',
					layout: {
						type: 'vbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'gridpanel',
							flex: 1,
							itemId: 'employeeScheduleGrid',
							bind: {
								store: '{EmployeeScheduleStore}'
							},
							columns: [
								{
									xtype: 'gridcolumn',
									dataIndex: 'employeeNumber',
									text: 'Employee No'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'firstName',
									text: 'First Name'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'lastName',
									text: 'Last Name'
								},
								{
									xtype: 'gridcolumn',
									width: 134,
									dataIndex: 'position',
									text: 'Position'
								},
								{
									xtype: 'datecolumn',
									dataIndex: 'currentClockIn',
									text: 'Current Clock In',
									format: 'h:ia'
								}
							],
							viewConfig: {
								getRowClass: function(record, rowIndex, rowParams, store) {
									if(record.data.currentClockIn !== null) {
										return 'row-green';
									}
								},
								enableTextSelection: true
							},
							listeners: {
								selectionchange: 'onEmployeeScheduleGridSelectionChange'
							}
						},
						{
							xtype: 'container',
							flex: 1,
							layout: {
								type: 'hbox',
								align: 'stretch'
							},
							items: [
								{
									xtype: 'gridpanel',
									flex: 1,
									itemId: 'laborHistoryGrid',
									title: 'Labor History',
									bind: {
										store: '{LaborHistoryStore}'
									},
									dockedItems: [
										{
											xtype: 'toolbar',
											dock: 'top',
											itemId: 'laborHistoryToolbar'
										}
									],
									columns: [
										{
											xtype: 'datecolumn',
											width: 160,
											dataIndex: 'startTime',
											text: 'Start Time',
											format: 'F j, Y g:i a'
										},
										{
											xtype: 'datecolumn',
											width: 160,
											dataIndex: 'endTime',
											text: 'End Time',
											format: 'F j, Y g:i a'
										},
										{
											xtype: 'gridcolumn',
											dataIndex: 'hoursWorked',
											text: 'Hours Worked'
										}
									],
									listeners: {
										selectionchange: 'onLaborHistoryGridSelectionChange'
									}
								},
								{
									xtype: 'laborform',
									itemId: 'laborForm',
									flex: 1,
									listeners: {
										laborchanged: 'onPanelLaborChangeD'
									}
								}
							]
						}
					]
				},
				{
					xtype: 'panel',
					layout: 'vbox',
					bodyPadding: 10,
					bodyStyle: 'background:none',
					title: 'Clock In',
					items: [
						{
							xtype: 'container',
							height: 20,
							itemId: 'clockOnDetails'
						},
						{
							xtype: 'container',
							margin: '30 0 0 0',
							layout: {
								type: 'hbox',
								align: 'stretch'
							},
							items: [
								{
									xtype: 'button',
									flex: 1,
									height: 44,
									width: 90,
									text: 'Clock On',
									listeners: {
										click: 'onButtonClick'
									}
								},
								{
									xtype: 'button',
									flex: 1,
									margin: '0 0 0 25',
									width: 90,
									text: 'Clock Off',
									listeners: {
										click: 'onButtonClick1'
									}
								}
							]
						}
					]
				}
			]
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onCalendarmonthBeforeEventadd: function(base, context, eOpts) {
		if(!this.addEventWindow) {
			this.addEventWindow = Ext.create("Schedule.view.AddEventForm", {
				listeners:{
					scope:this,
					eventadded:function() {
						this.queryById('calendar').getStore().load();
					}
				}
			});
		}

		this.addEventWindow.setTitle("Add Shift");

		this.addEventWindow.show(null, function(){
			this.addEventWindow.setDates(context.event.data, "Create");
		}, this);

		return false;
	},

	onCalendarmonthBeforeEventedit: function(base, context, eOpts) {
		if(!this.addEventWindow) {
			this.addEventWindow = Ext.create("Schedule.view.AddEventForm", {
				listeners:{
					scope:this,
					eventadded:function() {
						this.queryById('calendar').getStore().load();
					}
				}
			});
		}

		this.addEventWindow.setTitle("Edit Shift");

		this.addEventWindow.show(null, function(){
			this.addEventWindow.setDates(context.event.data, "Update");
		}, this);

		return false;
	},

	onCalendarmonthEventdrop: function(calendarweeksview, context, eOpts) {
		console.log(context);
		let startDate = new Date(context.event.data.startDate);
		startDateString = (startDate.getYear() + 1900) + "-" + (startDate.getMonth() + 1) + "-" + startDate.getDate();
		startTime = startDate.getHours() + ":" + startDate.getMinutes() + ":" + startDate.getSeconds();

		let endDate = new Date(context.event.data.endDate);
		endDateString = (endDate.getYear() + 1900) + "-" + (endDate.getMonth() + 1) + "-" + endDate.getDate();
		endTime = endDate.getHours() + ":" + endDate.getMinutes() + ":" + endDate.getSeconds();

		AERP.Ajax.request({
			url:'/Schedule/updateShift',
			jsonData:{
				scheduleId:context.event.data.scheduleId,
				employeeId:context.event.data.employeeId,
				startDate:startDateString,
				startTime:startTime,
				endDate:endDateString,
				endTime:endTime
			},
			success:function(reply) {
				this.queryById('calendar').getStore().load();
			},
			failure:function() {
				this.queryById('calendar').getStore().load();
			},
			scope:this,
			mask:this
		});
	},

	onEmployeeScheduleGridSelectionChange: function(model, selected, eOpts) {
		if(!selected || selected.length !== 1) {
			return;
		}

		selected = selected[0];

		this.readEmployeeLaborHistory(selected.data.employeeId);
	},

	onLaborHistoryGridSelectionChange: function(model, selected, eOpts) {
		if(!selected || selected.length !== 1) {
			return;
		}

		selected = selected[0];

		this.queryById('laborForm').readLabor(selected.data.laborId);
	},

	onPanelLaborChangeD: function(panel) {
		this.readEmployeeSchedule();
		this.readEmployeeLaborHistory(this.employeeId);
	},

	onButtonClick: function(button, e, eOpts) {
		this.clockOn();
	},

	onButtonClick1: function(button, e, eOpts) {
		this.clockOff();
	},

	onPanelAfterRender: function(component, eOpts) {
		this.buildNiceGridMenu();

		AERP.Ajax.request({
			url:'/Schedule/readAppInitData',
			success:function(reply) {
				this.getViewModel().getStore('EmployeeStore').loadData(reply.employees);
			},
			scope:this,
			mask:this
		});

		this.readEmployeeSchedule();
		this.readClockInDetails();
	},

	buildNiceGridMenu: function() {
		Ext.create('NiceGridMenu', {
			menuItems:[{action:'deleteLabor', text:'Delete Labor', icon:'/inc/img/silk_icons/delete.png', disabled:true}],
			callbackHandler:function(action, data) {
				switch(action) {
					case 'deleteLabor':
						this.deleteLabor(data.laborId);
						break;
				}
			},
			filterField:true,
			grid:this.queryById('laborHistoryGrid'),
			toolbar:this.queryById('laborHistoryToolbar'),
			scope:this
		});
	},

	deleteLabor: function(laborId) {
		Ext.Msg.confirm("Delete?", "Are you sure you want to delete?", function(button) {
			if(button === "yes") {
				AERP.Ajax.request({
					url:"/Schedule/deleteLabor",
					jsonData:{laborId:laborId},
					success:function(reply) {
						this.readEmployeeSchedule();
						this.readEmployeeLaborHistory(this.employeeId);
					},
					scope:this,
					mask:this
				});
			}
		}, this);
	},

	readEmployeeSchedule: function() {
		AERP.Ajax.request({
			url:'/Schedule/readEmployeeSchedule',
			success:function(reply) {
				this.getViewModel().getStore('EmployeeScheduleStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	readEmployeeLaborHistory: function(employeeId) {
		AERP.Ajax.request({
			url:'/Schedule/readEmployeeLaborHistory',
			jsonData:{employeeId:employeeId},
			success:function(reply) {
				this.employeeId = employeeId;
				this.getViewModel().getStore('LaborHistoryStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	readClockInDetails: function() {
		AERP.Ajax.request({
			url:'/Schedule/readClockOnDetails',
			success:function(reply) {
				this.queryById('clockOnDetails').setHtml(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	clockOn: function() {
		AERP.Ajax.request({
			url:'/Schedule/clockOn',
			success:function(reply) {
				this.readClockInDetails();
				this.readEmployeeSchedule();
				Ext.Msg.alert("Success", "You are now Clocked On!");
			},
			scope:this,
			mask:this
		});
	},

	clockOff: function() {
		AERP.Ajax.request({
			url:'/Schedule/clockOff',
			success:function(reply) {
				this.readClockInDetails();
				this.readEmployeeSchedule();
				Ext.Msg.alert("Success", "You are now Clocked Off!");
			},
			scope:this,
			mask:this
		});
	}

});