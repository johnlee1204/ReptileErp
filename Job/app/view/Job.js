/*
 * File: app/view/Job.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Job.view.Job', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.job',

	mixins: [
		'DocForm'
	],
	requires: [
		'Job.view.JobViewModel',
		'Ext.toolbar.Toolbar',
		'Ext.form.field.ComboBox',
		'Ext.form.field.Date',
		'Ext.tab.Panel',
		'Ext.tab.Tab'
	],

	viewModel: {
		type: 'job'
	},
	frame: true,
	minHeight: 500,
	minWidth: 500,
	title: 'Job',
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	dockedItems: [
		{
			xtype: 'toolbar',
			flex: 1,
			dock: 'top',
			itemId: 'jobToolbar'
		}
	],
	items: [
		{
			xtype: 'container',
			padding: 10,
			layout: 'hbox',
			items: [
				{
					xtype: 'textfield',
					itemId: 'job',
					fieldLabel: 'Job',
					labelAlign: 'right'
				},
				{
					xtype: 'combobox',
					itemId: 'status',
					margin: '0 0 0 15',
					fieldLabel: 'Status',
					labelAlign: 'right',
					labelWidth: 70,
					forceSelection: true,
					queryMode: 'local',
					bind: {
						store: '{StatusStore}'
					},
					listeners: {
						afterrender: 'onStatusAfterRender'
					}
				},
				{
					xtype: 'datefield',
					itemId: 'jobCreateDate',
					margin: '0 0 0 10',
					fieldLabel: 'Create Date',
					labelAlign: 'right',
					labelWidth: 70
				}
			]
		},
		{
			xtype: 'tabpanel',
			flex: 1,
			bodyStyle: 'background:none',
			items: [
				{
					xtype: 'panel',
					bodyPadding: 10,
					bodyStyle: 'background:none',
					title: 'Job',
					items: [
						{
							xtype: 'combobox',
							itemId: 'part',
							width: 337,
							fieldLabel: 'Part',
							emptyText: 'BEGIN TYPING',
							hideTrigger: true,
							displayField: 'partName',
							forceSelection: true,
							minChars: 1,
							queryParam: 'partName',
							typeAhead: true,
							typeAheadDelay: 150,
							valueField: 'partId',
							bind: {
								store: '{PartStore}'
							}
						},
						{
							xtype: 'textfield',
							itemId: 'quantity',
							fieldLabel: 'Quantity'
						},
						{
							xtype: 'datefield',
							itemId: 'jobStartDate',
							fieldLabel: 'Start Date'
						}
					]
				}
			]
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender',
		docFormStateChanged: 'onPanelDocFormStateChangeD'
	},

	onStatusAfterRender: function(component, eOpts) {
		AppWindowManager.appOn('dropDownSelectionEditor', {
			scope:this,
			selectionchanged:function() {
				this.readJobStatuses();
			}
		});

		component.el.on({
		    contextmenu: function(event) {
		        event.stopEvent();
		        AppWindowManager.appLink('dropDownSelectionEditor', {dataKey:'jobStatus'});
		    },
		    scope:this
		});

	},

	onPanelAfterRender: function(component, eOpts) {
		this.docFormInit({
			toolbarId:'jobToolbar',
			addFn:'createJob',
			saveFn:'updateJob',
			deleteFn:'deleteJob',
			searchFn:'searchJobs',
			searchableFields:['job', 'part']
		});

		this.readJobStatuses();
	},

	onPanelDocFormStateChangeD: function(oldState, newState) {
		let fields = ['jobCreateDate'];

		if(newState !== "search") {
			fields.push('job');
		}

		for(let i in fields) {
			let field = this.queryById(fields[i]);

			field.addCls('docFormReadOnly');
			field.setReadOnly(true);
		}
	},

	searchJobs: function() {
		if(!this.jobSearchWindow) {
			this.jobSearchWindow = Ext.create("Job.view.JobSearch", {
				listeners:{
					scope:this,
					jobselected:function(jobId) {
						this.readJob(jobId);
					}
				}
			});
		}

		this.jobSearchWindow.show(null, function(){
			this.jobSearchWindow.searchJobs(this.queryById('job').getValue(), this.queryById('part').getValue());
		}, this);
	},

	readJob: function(jobId) {
		AERP.Ajax.request({
			url:'/Job/readJob',
			jsonData:{jobId:jobId},
			success:function(reply) {
				this.getViewModel().getStore('PartStore').loadData([[reply.data.part, reply.data.partName]]);
				this.docFormLoadFormData(reply);
				this.jobId = jobId;
			},
			scope:this,
			mask:this
		});
	},

	createJob: function() {
		AERP.Ajax.request({
			url:'/Job/createJob',
			jsonData:this.docFormGetAllFieldValues(),
			success:function(reply) {
				this.readJob(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	updateJob: function() {

	},

	deleteJob: function() {

	},

	readJobStatuses: function() {
		AERP.Ajax.request({
			url:'/DropDownSelectionEditor/readSelectionsForCombo',
			jsonData:{selectionKey:'jobStatus'},
			success:function(reply) {
				this.getViewModel().getStore('StatusStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	}

});