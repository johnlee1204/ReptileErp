/*
 * File: app/view/Part.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ItemMaster.view.Part', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.part',

	requires: [
		'ItemMaster.view.PartViewModel',
		'Ext.form.field.ComboBox',
		'Ext.form.FieldSet'
	],

	viewModel: {
		type: 'part'
	},
	bodyPadding: 10,
	bodyStyle: 'background:none',
	title: 'Part',
	defaultListenerScope: true,

	items: [
		{
			xtype: 'textfield',
			itemId: 'partDescription',
			fieldLabel: 'Part Description'
		},
		{
			xtype: 'textfield',
			itemId: 'partsPerMinute',
			fieldLabel: 'Parts Per Minute'
		},
		{
			xtype: 'combobox',
			itemId: 'source',
			fieldLabel: 'Source',
			displayField: 'source',
			forceSelection: true,
			queryMode: 'local',
			valueField: 'source',
			bind: {
				store: '{SourceStore}'
			},
			listeners: {
				afterrender: 'onSourceAfterRender'
			}
		},
		{
			xtype: 'fieldset',
			padding: 10,
			width: 571,
			title: 'Calculations',
			items: [
				{
					xtype: 'container',
					layout: 'hbox',
					items: [
						{
							xtype: 'textfield',
							docFormSkip: true,
							itemId: 'partsProduced',
							fieldLabel: 'Parts Produced',
							listeners: {
								change: 'onPartsProducedChange'
							}
						},
						{
							xtype: 'textfield',
							docFormSkip: true,
							itemId: 'estimatedTime',
							margin: '0 0 0 20',
							fieldLabel: 'Estimated Time',
							listeners: {
								change: 'onEstimatedTimeChange'
							}
						}
					]
				}
			]
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onSourceAfterRender: function(component, eOpts) {
		AppWindowManager.appOn('dropDownSelectionEditor', {
			scope:this,
			selectionchanged:function() {
				this.readPartSources();
			}
		});

		component.el.on({
		    contextmenu: function(event) {
		        event.stopEvent();
		        AppWindowManager.appLink('dropDownSelectionEditor', {dataKey:'partSource'});
		    },
		    scope:this
		});

	},

	onPartsProducedChange: function(field, newValue, oldValue, eOpts) {
		this.queryById('estimatedTime').setValue(newValue / this.queryById('partsPerMinute').getValue());
	},

	onEstimatedTimeChange: function(field, newValue, oldValue, eOpts) {
		this.queryById('partsProduced').setValue(newValue * this.queryById('partsPerMinute').getValue());
	},

	onPanelAfterRender: function(component, eOpts) {
		this.readPartSources();
	},

	readPartSources: function() {
		AERP.Ajax.request({
			url:'/DropDownSelectionEditor/readSelectionsForCombo',
			jsonData:{selectionKey:'partSource'},
			success:function(reply) {
				this.getViewModel().getStore('SourceStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	}

});