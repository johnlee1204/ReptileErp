/*
 * File: app/view/PartBom.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ItemMaster.view.PartBom', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.partbom',

	requires: [
		'ItemMaster.view.PartBomViewModel',
		'ItemMaster.view.PartBomForm',
		'Ext.tree.Panel',
		'Ext.tree.View',
		'Ext.tree.Column'
	],

	viewModel: {
		type: 'partbom'
	},
	bodyStyle: 'background:none',
	title: 'Part BOM',
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'treepanel',
			flex: 1,
			itemId: 'partBomGrid',
			width: 400,
			rowLines: true,
			folderSort: true,
			useArrows: true,
			viewConfig: {
				enableTextSelection: true
			},
			columns: [
				{
					xtype: 'treecolumn',
					width: 203,
					dataIndex: 'partName',
					text: 'Part'
				},
				{
					xtype: 'gridcolumn',
					width: 325,
					dataIndex: 'partDescription',
					text: 'Part Description'
				},
				{
					xtype: 'gridcolumn',
					width: 173,
					dataIndex: 'quantity',
					text: 'Quantity'
				},
				{
					xtype: 'gridcolumn',
					width: 173,
					dataIndex: 'extendedQuantity',
					text: 'Extended Quantity'
				},
				{
					xtype: 'gridcolumn',
					hidden: true,
					dataIndex: 'bomId',
					text: 'Bom Id'
				},
				{
					xtype: 'gridcolumn',
					hidden: true,
					dataIndex: 'partId',
					text: 'Part Id'
				},
				{
					xtype: 'gridcolumn',
					hidden: true,
					dataIndex: 'isBomRecord',
					text: 'Is Bom Record'
				}
			],
			listeners: {
				selectionchange: 'onPartBomGridSelectionChange'
			}
		},
		{
			xtype: 'partbomform',
			itemId: 'partBomForm',
			listeners: {
				bomchanged: 'onPanelBomChangeD'
			}
		}
	],

	onPartBomGridSelectionChange: function(model, selected, eOpts) {
		if(!selected || selected.length !== 1) {
			return;
		}

		selected = selected[0];

		if(selected.data.isBomRecord === 1) {
			this.queryById('partBomForm').readBomRecord(selected.data.bomId);
		} else {
			this.queryById('partBomForm').setParentPart(selected.data.partId, selected.data.partName);
		}
	},

	onPanelBomChangeD: function(panel) {
		this.readPartBom(this.partId);
	},

	readPartBom: function(partId) {
		AERP.Ajax.request({
			url:'/ItemMaster/readPartBom',
			jsonData:{partId: partId},
			success:function(reply) {
				let partBomGrid = this.queryById('partBomGrid');
				partBomGrid.setRootNode(reply.data);
				partBomGrid.expandAll();
				this.partId = partId;
			},
			scope:this,
			mask:this
		});
	}

});