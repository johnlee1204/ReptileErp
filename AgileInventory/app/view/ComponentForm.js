/*
 * File: app/view/ComponentForm.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AgileInventory.view.ComponentForm', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.componentform',

	mixins: [
		'DocForm'
	],
	requires: [
		'AgileInventory.view.ComponentFormViewModel',
		'Ext.toolbar.Toolbar',
		'Ext.form.field.ComboBox',
		'Ext.form.field.Number'
	],

	viewModel: {
		type: 'componentform'
	},
	layout: 'vbox',
	bodyPadding: 10,
	bodyStyle: 'background:none',
	defaultListenerScope: true,

	dockedItems: [
		{
			xtype: 'toolbar',
			flex: 1,
			dock: 'top',
			itemId: 'componentFormToolbar'
		}
	],
	items: [
		{
			xtype: 'combobox',
			itemId: 'productId',
			fieldLabel: 'Product',
			labelAlign: 'right',
			displayField: 'productName',
			forceSelection: true,
			queryMode: 'local',
			valueField: 'productId',
			bind: {
				store: '{ProductStore}'
			}
		},
		{
			xtype: 'numberfield',
			itemId: 'quantity',
			fieldLabel: 'Quantity',
			labelAlign: 'right',
			hideTrigger: true
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onPanelAfterRender: function(component, eOpts) {
		this.docFormInit({
			toolbarId:'componentFormToolbar',
			addFn:'createComponent',
			saveFn:'updateComponent',
			deleteFn:'deleteComponent'
		});

		AERP.Ajax.request({
			url:"/AgileInventory/readProductsCombo",
			success:function(reply) {
				this.getViewModel().getStore('ProductStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	readComponent: function(componentId) {
		AERP.Ajax.request({
			url:"/AgileInventory/readComponent",
			jsonData:{componentId:componentId},
			success:function(reply) {
				this.componentId = componentId;
				this.docFormLoadFormData(reply);
			},
			scope:this,
			mask:this
		});
	},

	createComponent: function() {
		let jsonData = this.docFormGetAllFieldValues();
		jsonData.parentProductId = this.parentProductId;

		AERP.Ajax.request({
			url:"/AgileInventory/createComponent",
			jsonData:jsonData,
			success:function(reply) {
				this.readComponent(reply.data);
				this.fireEvent('componentchanged');
			},
			scope:this,
			mask:this
		});
	},

	updateComponent: function() {
		let jsonData = this.docFormGetAllFieldValues();
		jsonData.componentId = this.componentId;

		AERP.Ajax.request({
			url:"/AgileInventory/updateComponent",
			jsonData:jsonData,
			success:function(reply) {
				this.readComponent(this.componentId);
				this.fireEvent('componentchanged');
			},
			scope:this,
			mask:this
		});
	},

	deleteComponent: function() {
		AERP.Ajax.request({
			url:"/AgileInventory/deleteComponent",
			jsonData:{componentId:this.componentId},
			success:function(reply) {
				this.componentId = null;
				this.docFormReset();
				this.fireEvent('componentchanged');
			},
			scope:this,
			mask:this
		});
	}

});