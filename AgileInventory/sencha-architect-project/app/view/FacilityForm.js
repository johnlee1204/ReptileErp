/*
 * File: app/view/FacilityForm.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AgileInventory.view.FacilityForm', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.facilityform',

	mixins: [
		'DocForm'
	],
	requires: [
		'AgileInventory.view.FacilityFormViewModel',
		'Ext.toolbar.Toolbar',
		'Ext.form.field.Text'
	],

	viewModel: {
		type: 'facilityform'
	},
	flex: 1,
	layout: 'vbox',
	bodyPadding: 10,
	bodyStyle: 'background:none',
	defaultListenerScope: true,

	dockedItems: [
		{
			xtype: 'toolbar',
			flex: 1,
			dock: 'top',
			itemId: 'facilityFormToolbar'
		}
	],
	items: [
		{
			xtype: 'textfield',
			itemId: 'facilityName',
			fieldLabel: 'Name'
		},
		{
			xtype: 'textfield',
			itemId: 'facilityDescription',
			fieldLabel: 'Description'
		},
		{
			xtype: 'textfield',
			itemId: 'address1',
			fieldLabel: 'Address 1'
		},
		{
			xtype: 'textfield',
			itemId: 'address2',
			fieldLabel: 'Address 2'
		},
		{
			xtype: 'textfield',
			itemId: 'city',
			fieldLabel: 'City'
		},
		{
			xtype: 'textfield',
			itemId: 'province',
			fieldLabel: 'Province'
		},
		{
			xtype: 'textfield',
			itemId: 'zip',
			fieldLabel: 'Zip'
		},
		{
			xtype: 'textfield',
			itemId: 'country',
			fieldLabel: 'Country'
		},
		{
			xtype: 'textfield',
			itemId: 'phone',
			fieldLabel: 'Phone'
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onPanelAfterRender: function(component, eOpts) {
		this.docFormInit({
			toolbar:'facilityFormToolbar',
			addFn:'createFacility',
			saveFn:'updateFacility',
			deleteFn:'deleteFacility'
		});
	},

	readFacility: function(facilityId) {
		AERP.AJax.request({
			url:"/AgileInventory/readFacility",
			jsonData:{facilityId:facilityId},
			success:function(reply) {
				this.facilityId = facilityId;
				this.docFormLoadFormData(reply);
			},
			scope:this,
			mask:this
		});
	},

	createFacility: function() {
		AERP.AJax.request({
			url:"/AgileInventory/createFacility",
			jsonData:this.docFormGetAllFieldValues(),
			success:function(reply) {
				this.readFacility(reply.data);
				this.fireEvent('facilitychanged');
			},
			scope:this,
			mask:this
		});
	},

	updateFacility: function() {
		let jsonData = this.docFormGetAllFieldValues();
		jsonData.facilityId = this.facilityId;

		AERP.AJax.request({
			url:"/AgileInventory/updateFacility",
			jsonData:jsonData,
			success:function(reply) {
				this.readFacility(this.facilityId);
				this.fireEvent('facilitychanged');
			},
			scope:this,
			mask:this
		});
	},

	deleteFacility: function() {
		AERP.AJax.request({
			url:"/AgileInventory/deleteFacility",
			jsonData:{facilityId:this.facilityId},
			success:function(reply) {
				this.facilityId = null;
				this.docFormReset();
				this.fireEvent('facilitychanged');
			},
			scope:this,
			mask:this
		});
	}

});