/*
 * File: app/view/DrillDown.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AgileInventory.view.DrillDown', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.drilldown',

	requires: [
		'AgileInventory.view.DrillDownViewModel',
		'Ext.grid.Panel',
		'Ext.toolbar.Toolbar',
		'Ext.view.Table',
		'Ext.grid.column.Number'
	],

	viewModel: {
		type: 'drilldown'
	},
	bodyStyle: 'background:none',
	title: 'Drill Down',
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'container',
			flex: 1,
			layout: {
				type: 'hbox',
				align: 'stretch'
			},
			items: [
				{
					xtype: 'gridpanel',
					flex: 1,
					itemId: 'locationGrid',
					title: 'Location',
					bind: {
						store: '{LocationStore}'
					},
					dockedItems: [
						{
							xtype: 'toolbar',
							dock: 'top',
							itemId: 'locationToolbar'
						}
					],
					columns: [
						{
							xtype: 'gridcolumn',
							width: 150,
							dataIndex: 'facilityName',
							text: 'Facility'
						},
						{
							xtype: 'gridcolumn',
							dataIndex: 'locationName',
							text: 'Location'
						},
						{
							xtype: 'gridcolumn',
							width: 294,
							dataIndex: 'locationDescription',
							text: 'Description'
						}
					],
					viewConfig: {
						enableTextSelection: true
					},
					listeners: {
						selectionchange: 'onGridpanelSelectionChange'
					}
				},
				{
					xtype: 'gridpanel',
					flex: 1,
					itemId: 'binGrid',
					title: 'Bin',
					bind: {
						store: '{BinStore}'
					},
					dockedItems: [
						{
							xtype: 'toolbar',
							dock: 'top',
							itemId: 'binToolbar'
						}
					],
					columns: [
						{
							xtype: 'gridcolumn',
							dataIndex: 'binName',
							text: 'Bin'
						},
						{
							xtype: 'gridcolumn',
							width: 256,
							dataIndex: 'binDescription',
							text: 'Description'
						}
					],
					viewConfig: {
						enableTextSelection: true
					},
					listeners: {
						selectionchange: 'onGridpanelSelectionChange1'
					}
				},
				{
					xtype: 'gridpanel',
					flex: 1,
					itemId: 'productGrid',
					title: 'Products On Hand',
					bind: {
						store: '{OnHandStore}'
					},
					dockedItems: [
						{
							xtype: 'toolbar',
							dock: 'top',
							itemId: 'productToolbar'
						}
					],
					columns: [
						{
							xtype: 'gridcolumn',
							itemId: 'onHandBinColumn',
							dataIndex: 'bin',
							text: 'Bin'
						},
						{
							xtype: 'gridcolumn',
							width: 134,
							dataIndex: 'productName',
							text: 'Product'
						},
						{
							xtype: 'numbercolumn',
							width: 102,
							dataIndex: 'quantity',
							text: 'Quantity'
						}
					],
					viewConfig: {
						enableTextSelection: true
					}
				}
			]
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onGridpanelSelectionChange: function(model, selected, eOpts) {
		if(!selected || selected.length !== 1) {
			return;
		}

		selected = selected[0];

		this.readBinsForLocation(selected.data.locationId);
	},

	onGridpanelSelectionChange1: function(model, selected, eOpts) {
		if(!selected || selected.length !== 1) {
			return;
		}

		selected = selected[0];

		this.readOnHandForBin(selected.data.binId);
	},

	onPanelAfterRender: function(component, eOpts) {
		this.readLocations();
		this.buildNiceGridMenus();
	},

	buildNiceGridMenus: function() {
		Ext.create("NiceGridMenu", {
			menuItems:[{text:"Edit Location", action:"editLocation", icon:"/inc/img/silk_icons/pencil.png", disabled:true}],
			callbackHandler:function(action, data) {
				switch(action) {
					case 'editLocation':
						AppWindowManager.appLink('location', {dataKey:data.locationId});
						break;
				}
			},
			doubleClick:'editLocation',
			filterField:true,
			grid:this.queryById('locationGrid'),
			toolbar:this.queryById('locationToolbar'),
			scope:this
		});

		Ext.create("NiceGridMenu", {
			menuItems:[{text:"Edit Bin", action:"editBin", icon:"/inc/img/silk_icons/pencil.png", disabled:true}],
			callbackHandler:function(action, data) {
				switch(action) {
					case 'editBin':
						AppWindowManager.appLink('bin', {dataKey:data.binId});
						break;
				}
			},
			doubleClick:'editBin',
			filterField:true,
			grid:this.queryById('binGrid'),
			toolbar:this.queryById('binToolbar'),
			scope:this
		});

		Ext.create("NiceGridMenu", {
			menuItems:[{text:"Edit Product", action:"editProduct", icon:"/inc/img/silk_icons/pencil.png", disabled:true}],
			callbackHandler:function(action, data) {
				switch(action) {
					case 'editProduct':
						AppWindowManager.appLink('product', {dataKey:data.productId});
						break;
				}
			},
			doubleClick:'editProduct',
			filterField:true,
			grid:this.queryById('productGrid'),
			toolbar:this.queryById('productToolbar'),
			scope:this
		});
	},

	readLocations: function() {
		AERP.Ajax.request({
			url:'/AgileInventory/readLocations',
			success:function(reply) {
				this.getViewModel().getStore('LocationStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	readBinsForLocation: function(locationId) {
		AERP.Ajax.request({
			url:'/AgileInventory/readBinsForLocation',
			jsonData:{locationId:locationId},
			success:function(reply) {
				this.getViewModel().getStore('BinStore').loadData(reply.data);
				this.readOnHandForLocation(locationId);
			},
			scope:this
		});
	},

	readOnHandForBin: function(binId) {
		AERP.Ajax.request({
			url:'/AgileInventory/readOnHandForBin',
			jsonData:{binId:binId},
			success:function(reply) {
				this.getViewModel().getStore('OnHandStore').loadData(reply.data);
				//this.queryById('onHandBinColumn').hide();
			},
			scope:this
		});
	},

	readOnHandForLocation: function(locationId) {
		AERP.Ajax.request({
			url:'/AgileInventory/readOnHandForLocation',
			jsonData:{locationId:locationId},
			success:function(reply) {
				this.getViewModel().getStore('OnHandStore').loadData(reply.data);
				this.queryById('onHandBinColumn').show();
			},
			scope:this
		});
	}

});