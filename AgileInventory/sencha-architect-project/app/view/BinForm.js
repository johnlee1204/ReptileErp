/*
 * File: app/view/BinForm.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AgileInventory.view.BinForm', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.binform',

	mixins: [
		'DocForm'
	],
	requires: [
		'AgileInventory.view.BinFormViewModel',
		'Ext.toolbar.Toolbar',
		'Ext.form.field.ComboBox'
	],

	viewModel: {
		type: 'binform'
	},
	flex: 1,
	bodyPadding: 10,
	bodyStyle: 'background:none',
	defaultListenerScope: true,

	dockedItems: [
		{
			xtype: 'toolbar',
			dock: 'top',
			itemId: 'binFormToolbar'
		}
	],
	items: [
		{
			xtype: 'combobox',
			itemId: 'location',
			fieldLabel: 'Location',
			displayField: 'locationName',
			forceSelection: true,
			queryMode: 'local',
			valueField: 'locationId',
			bind: {
				store: '{LocationStore}'
			}
		},
		{
			xtype: 'textfield',
			itemId: 'binName',
			fieldLabel: 'Name'
		},
		{
			xtype: 'textfield',
			itemId: 'binDescription',
			fieldLabel: 'Description'
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onPanelAfterRender: function(component, eOpts) {
		this.docFormInit({
			toolbarId:"binFormToolbar",
			addFn:"createBin",
			saveFn:"updateBin",
			deleteFn:"deleteBin"
		});

		this.readLocations();
	},

	readLocations: function() {
		AERP.Ajax.request({
			url:'/AgileInventory/readLocations',
			success:function(reply) {
				this.getViewModel().getStore('LocationStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	readBin: function(binId) {
		AERP.Ajax.request({
			url:"/AgileInventory/readBin",
			jsonData:{binId:binId},
			success:function(reply) {
				this.binId = binId;
				this.docFormLoadFormData(reply);
			},
			scope:this,
			mask:this
		});
	},

	createBin: function() {
		AERP.Ajax.request({
			url:"/AgileInventory/createBin",
			jsonData:this.docFormGetAllFieldValues(),
			success:function(reply) {
				this.readBin(reply.data);
				this.fireEvent('binchanged');
			},
			scope:this,
			mask:this
		});
	},

	updateBin: function() {
		let jsonData = this.docFormGetAllFieldValues();
		jsonData.binId = this.binId;

		AERP.Ajax.request({
			url:"/AgileInventory/updateBin",
			jsonData:jsonData,
			success:function(reply) {
				this.readBin(this.binId);
				this.fireEvent('binchanged');
			},
			scope:this,
			mask:this
		});
	},

	deleteBin: function() {
		AERP.Ajax.request({
			url:"/AgileInventory/deleteBin",
			jsonData:{binId:this.binId},
			success:function(reply) {
				this.binId = null;
				this.docFormReset();
				this.fireEvent('binchanged');
			},
			scope:this,
			mask:this
		});
	}

});