/*
 * File: app/view/ProductForm.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AgileInventory.view.ProductForm', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.productform',

	mixins: [
		'DocForm'
	],
	requires: [
		'AgileInventory.view.ProductFormViewModel',
		'Ext.toolbar.Toolbar',
		'Ext.tab.Panel',
		'Ext.tab.Tab',
		'Ext.form.FieldSet',
		'Ext.form.field.ComboBox',
		'Ext.grid.Panel',
		'Ext.view.Table',
		'Ext.form.field.Number',
		'Ext.grid.column.Date'
	],

	viewModel: {
		type: 'productform'
	},
	flex: 1,
	bodyStyle: 'background:none',
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	dockedItems: [
		{
			xtype: 'toolbar',
			dock: 'top',
			itemId: 'productFormToolbar'
		}
	],
	items: [
		{
			xtype: 'container',
			padding: 10,
			items: [
				{
					xtype: 'textfield',
					itemId: 'productName',
					fieldLabel: 'Name'
				},
				{
					xtype: 'textfield',
					itemId: 'productDescription',
					fieldLabel: 'Description'
				}
			]
		},
		{
			xtype: 'tabpanel',
			flex: 1,
			bodyStyle: 'background:none',
			activeTab: 0,
			items: [
				{
					xtype: 'panel',
					flex: 1,
					bodyPadding: 10,
					bodyStyle: 'background:none',
					title: 'Product',
					layout: {
						type: 'vbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'container',
							items: [
								{
									xtype: 'textfield',
									itemId: 'sku',
									fieldLabel: 'SKU'
								}
							]
						},
						{
							xtype: 'container',
							layout: {
								type: 'hbox',
								align: 'stretch'
							},
							items: [
								{
									xtype: 'fieldset',
									margin: '0 5 0 0 ',
									title: 'Primary',
									items: [
										{
											xtype: 'container',
											items: [
												{
													xtype: 'combobox',
													itemId: 'primaryLocation',
													fieldLabel: 'Primary Loc',
													displayField: 'locationName',
													forceSelection: true,
													queryMode: 'local',
													valueField: 'locationId',
													bind: {
														store: '{PrimaryLocationStore}'
													},
													listeners: {
														select: 'onComboboxSelect'
													}
												},
												{
													xtype: 'combobox',
													itemId: 'primaryBin',
													fieldLabel: 'Primary Bin',
													displayField: 'binName',
													forceSelection: true,
													queryMode: 'local',
													valueField: 'binId',
													bind: {
														store: '{PrimaryBinStore}'
													}
												}
											]
										}
									]
								},
								{
									xtype: 'fieldset',
									margin: '0 0 0 5',
									title: 'Secondary',
									items: [
										{
											xtype: 'container',
											items: [
												{
													xtype: 'combobox',
													itemId: 'secondaryLocation',
													fieldLabel: 'Secondary Loc',
													displayField: 'locationName',
													forceSelection: true,
													queryMode: 'local',
													valueField: 'locationId',
													bind: {
														store: '{SecondaryLocationStore}'
													},
													listeners: {
														select: 'onComboboxSelect1'
													}
												},
												{
													xtype: 'combobox',
													itemId: 'secondaryBin',
													fieldLabel: 'Secondary Bin',
													displayField: 'binName',
													forceSelection: true,
													queryMode: 'local',
													valueField: 'binId',
													bind: {
														store: '{SecondaryBinStore}'
													}
												}
											]
										}
									]
								}
							]
						},
						{
							xtype: 'container'
						}
					]
				},
				{
					xtype: 'panel',
					bodyStyle: 'background:none',
					title: 'On Hand',
					layout: {
						type: 'vbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'gridpanel',
							flex: 1,
							bind: {
								store: '{OnHandStore}'
							},
							columns: [
								{
									xtype: 'gridcolumn',
									dataIndex: 'location',
									text: 'Location'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'bin',
									text: 'Bin'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'quantity',
									text: 'Quantity'
								},
								{
									xtype: 'gridcolumn',
									width: 130,
									dataIndex: 'designation',
									text: 'Designation'
								}
							],
							viewConfig: {
								enableTextSelection: true
							}
						}
					]
				},
				{
					xtype: 'panel',
					flex: 1,
					bodyStyle: 'background:none',
					title: 'Adjust',
					layout: {
						type: 'hbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'container',
							flex: 1,
							padding: 10,
							items: [
								{
									xtype: 'combobox',
									itemId: 'adjustmentType',
									fieldLabel: 'Type',
									labelWidth: 50,
									displayField: 'type',
									forceSelection: true,
									queryMode: 'local',
									valueField: 'type',
									bind: {
										store: '{AdjustmentTypeStore}'
									}
								},
								{
									xtype: 'numberfield',
									itemId: 'adjustmentQuantity',
									fieldLabel: 'Quantity',
									labelWidth: 50,
									hideTrigger: true
								},
								{
									xtype: 'container',
									layout: {
										type: 'hbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'combobox',
											itemId: 'adjustmentLocation',
											width: 170,
											fieldLabel: 'Location',
											labelWidth: 50,
											displayField: 'locationName',
											forceSelection: true,
											queryMode: 'local',
											valueField: 'locationId',
											bind: {
												store: '{AdjustmentLocationStore}'
											},
											listeners: {
												select: 'onAdjustmentLocationSelect'
											}
										},
										{
											xtype: 'combobox',
											itemId: 'adjustmentBin',
											width: 170,
											fieldLabel: 'Bin',
											labelAlign: 'right',
											labelWidth: 40,
											displayField: 'binName',
											forceSelection: true,
											queryMode: 'local',
											valueField: 'binId',
											bind: {
												store: '{AdjustmentBinStore}'
											}
										}
									]
								},
								{
									xtype: 'button',
									margin: '10 0 0 0',
									text: 'Adjust',
									listeners: {
										click: 'onButtonClick'
									}
								}
							]
						},
						{
							xtype: 'gridpanel',
							flex: 1,
							flex: 1,
							bind: {
								store: '{AdjustmentOnHandStore}'
							},
							columns: [
								{
									xtype: 'gridcolumn',
									dataIndex: 'location',
									text: 'Location'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'bin',
									text: 'Bin'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'quantity',
									text: 'Quantity'
								},
								{
									xtype: 'gridcolumn',
									width: 133,
									dataIndex: 'designation',
									text: 'Designation'
								}
							],
							viewConfig: {
								enableTextSelection: true
							},
							listeners: {
								selectionchange: 'onGridpanelSelectionChange'
							}
						}
					]
				},
				{
					xtype: 'panel',
					flex: 1,
					bodyStyle: 'background:none',
					title: 'Transfer',
					layout: {
						type: 'vbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'container',
							flex: 1,
							layout: {
								type: 'hbox',
								align: 'stretch'
							},
							items: [
								{
									xtype: 'container',
									flex: 1,
									layout: {
										type: 'vbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'container',
											padding: 10,
											layout: 'vbox',
											items: [
												{
													xtype: 'container',
													flex: 1,
													layout: {
														type: 'hbox',
														align: 'stretch'
													},
													items: [
														{
															xtype: 'combobox',
															itemId: 'transferFromLocation',
															width: 170,
															fieldLabel: 'Location',
															labelWidth: 50,
															displayField: 'locationName',
															forceSelection: true,
															queryMode: 'local',
															valueField: 'locationId',
															bind: {
																store: '{TransferFromLocationStore}'
															},
															listeners: {
																select: 'onAdjustmentLocationSelect1'
															}
														},
														{
															xtype: 'combobox',
															itemId: 'transferFromBin',
															width: 170,
															fieldLabel: 'Bin',
															labelAlign: 'right',
															labelWidth: 40,
															displayField: 'binName',
															forceSelection: true,
															queryMode: 'local',
															valueField: 'binId',
															bind: {
																store: '{TransferFromBinStore}'
															}
														}
													]
												},
												{
													xtype: 'container',
													margin: '5 0 0 0 ',
													layout: {
														type: 'hbox',
														align: 'stretch'
													},
													items: [
														{
															xtype: 'numberfield',
															flex: 1,
															itemId: 'transferQuantity',
															fieldLabel: 'Quantity',
															labelWidth: 50,
															hideTrigger: true
														},
														{
															xtype: 'button',
															margin: '0 0 0 10',
															text: 'Transfer',
															listeners: {
																click: 'onButtonClick1'
															}
														}
													]
												}
											]
										},
										{
											xtype: 'gridpanel',
											flex: 1,
											title: 'From',
											bind: {
												store: '{TransferFromOnHandStore}'
											},
											columns: [
												{
													xtype: 'gridcolumn',
													dataIndex: 'location',
													text: 'Location'
												},
												{
													xtype: 'gridcolumn',
													dataIndex: 'bin',
													text: 'Bin'
												},
												{
													xtype: 'gridcolumn',
													dataIndex: 'quantity',
													text: 'Quantity'
												},
												{
													xtype: 'gridcolumn',
													width: 133,
													dataIndex: 'designation',
													text: 'Designation'
												}
											],
											viewConfig: {
												enableTextSelection: true
											},
											listeners: {
												selectionchange: 'onGridpanelSelectionChange1'
											}
										}
									]
								},
								{
									xtype: 'container',
									flex: 1,
									layout: {
										type: 'vbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'container',
											padding: 10,
											layout: {
												type: 'hbox',
												align: 'stretch'
											},
											items: [
												{
													xtype: 'combobox',
													itemId: 'transferToLocation',
													width: 170,
													fieldLabel: 'Location',
													labelWidth: 50,
													displayField: 'locationName',
													forceSelection: true,
													queryMode: 'local',
													valueField: 'locationId',
													bind: {
														store: '{TransferToLocationStore}'
													},
													listeners: {
														select: 'onAdjustmentLocationSelect11'
													}
												},
												{
													xtype: 'combobox',
													itemId: 'transferToBin',
													width: 170,
													fieldLabel: 'Bin',
													labelAlign: 'right',
													labelWidth: 40,
													displayField: 'binName',
													forceSelection: true,
													queryMode: 'local',
													valueField: 'binId',
													bind: {
														store: '{TransferToBinStore}'
													}
												}
											]
										},
										{
											xtype: 'gridpanel',
											flex: 1,
											margin: '29 0 0 0',
											title: 'To',
											bind: {
												store: '{TransferToOnHandStore}'
											},
											columns: [
												{
													xtype: 'gridcolumn',
													dataIndex: 'location',
													text: 'Location'
												},
												{
													xtype: 'gridcolumn',
													dataIndex: 'bin',
													text: 'Bin'
												},
												{
													xtype: 'gridcolumn',
													dataIndex: 'quantity',
													text: 'Quantity'
												},
												{
													xtype: 'gridcolumn',
													width: 133,
													dataIndex: 'designation',
													text: 'Designation'
												}
											],
											viewConfig: {
												enableTextSelection: true
											},
											listeners: {
												selectionchange: 'onGridpanelSelectionChange11'
											}
										}
									]
								}
							]
						}
					]
				},
				{
					xtype: 'panel',
					bodyStyle: 'background:none',
					title: 'Transaction History',
					layout: {
						type: 'vbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'gridpanel',
							flex: 1,
							bind: {
								store: '{TransactionHistoryStore}'
							},
							columns: [
								{
									xtype: 'datecolumn',
									width: 150,
									dataIndex: 'transactionDate',
									text: 'Date',
									format: 'M, j Y h:ia'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'type',
									text: 'Type'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'quantity',
									text: 'Quantity'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'fromLocation',
									text: 'From Loc'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'fromBin',
									text: 'From Bin'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'toLocation',
									text: 'To Loc'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'toBin',
									text: 'To Bin'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'transferedBy',
									text: 'Transfered By'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'comment',
									text: 'Comment'
								}
							],
							viewConfig: {
								enableTextSelection: true
							}
						}
					]
				}
			]
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender',
		docFormBeforeNew: 'onPanelDocFormBeforeNew'
	},

	onComboboxSelect: function(combo, record, eOpts) {
		this.readBinsForLocation(record.data.locationId, "primaryBin");
	},

	onComboboxSelect1: function(combo, record, eOpts) {
		this.readBinsForLocation(record.data.locationId, "secondaryBin");
	},

	onAdjustmentLocationSelect: function(combo, record, eOpts) {
		this.readBinsForLocation(record.data.locationId, "adjustmentBin");
	},

	onButtonClick: function(button, e, eOpts) {
		this.adjustQuantity();
	},

	onGridpanelSelectionChange: function(model, selected, eOpts) {
		if(!selected || selected.length !== 1) {
			return;
		}

		selected = selected[0];

		this.queryById('adjustmentLocation').setValue(selected.data.locationId);

		this.readBinsForLocation(selected.data.locationId, "adjustmentBin", selected.data.binId);
	},

	onAdjustmentLocationSelect1: function(combo, record, eOpts) {
		this.readBinsForLocation(record.data.locationId, "transferFromBin");
	},

	onButtonClick1: function(button, e, eOpts) {
		this.transferQuantity();
	},

	onGridpanelSelectionChange1: function(model, selected, eOpts) {
		if(!selected || selected.length !== 1) {
			return;
		}

		selected = selected[0];

		this.queryById('transferFromLocation').setValue(selected.data.locationId);

		this.readBinsForLocation(selected.data.locationId, "transferFromBin", selected.data.binId);
	},

	onAdjustmentLocationSelect11: function(combo, record, eOpts) {
		this.readBinsForLocation(record.data.locationId, "transferToBin");
	},

	onGridpanelSelectionChange11: function(model, selected, eOpts) {
		if(!selected || selected.length !== 1) {
			return;
		}

		selected = selected[0];

		this.queryById('transferToLocation').setValue(selected.data.locationId);

		this.readBinsForLocation(selected.data.locationId, "transferToBin", selected.data.binId);
	},

	onPanelAfterRender: function(component, eOpts) {
		this.docFormInit({
			toolbarId:"productFormToolbar",
			addFn:"createProduct",
			saveFn:"updateProduct",
			deleteFn:"deleteProduct"
		});

		AERP.Ajax.request({
			url:"/AgileInventory/readLocations",
			success:function(reply) {
				let viewModel = this.getViewModel();
				viewModel.getStore('PrimaryLocationStore').loadData(reply.data);
				viewModel.getStore('SecondaryLocationStore').loadData(reply.data);
				viewModel.getStore('AdjustmentLocationStore').loadData(reply.data);
				viewModel.getStore('TransferFromLocationStore').loadData(reply.data);
				viewModel.getStore('TransferToLocationStore').loadData(reply.data);
				this.fireEvent('appdataloaded');
			},
			scope:this,
			mask:this
		});
	},

	onPanelDocFormBeforeNew: function(panel) {
		this.generateSku();
	},

	generateSku: function() {
		AERP.Ajax.request({
			url:"/AgileInventory/generateSku",
			success:function(reply) {
				this.queryById('sku').setValue(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	readProduct: function(productId) {
		AERP.Ajax.request({
			url:"/AgileInventory/readProduct",
			jsonData:{productId:productId},
			success:function(reply) {
				this.productId = productId;

				if(reply.data.primaryLocation) {
					this.readBinsForLocation(reply.data.primaryLocation, "primaryBin", reply.data.primaryBin);
				}
				if(reply.data.secondaryLocation) {
					this.readBinsForLocation(reply.data.secondaryLocation, "secondaryBin", reply.data.secondaryBin);
				}

				this.docFormLoadFormData(reply);
				this.readOnHand(productId);
				this.readTransactionHistory(productId);
			},
			scope:this,
			mask:this
		});
	},

	readBinsForLocation: function(locationId, fieldId, binId) {
		AERP.Ajax.request({
			url:'/AgileInventory/readBinsForLocation',
			jsonData:{locationId:locationId},
			success:function(reply) {
				let field = this.queryById(fieldId);
				field.getStore().loadData(reply.data);
				if(binId !== null) {
					field.setValue(binId);
				} else {
					field.reset();
				}
			},
			scope:this,
			mask:this
		});
	},

	createProduct: function() {
		AERP.Ajax.request({
			url:'/AgileInventory/createProduct',
			jsonData:this.docFormGetAllFieldValues(),
			success:function(reply) {
				this.readProduct(reply.data);
				this.fireEvent('productchanged');
			},
			scope:this,
			mask:this
		});
	},

	updateProduct: function() {
		let jsonData = this.docFormGetAllFieldValues();
		jsonData.productId = this.productId;

		AERP.Ajax.request({
			url:'/AgileInventory/updateProduct',
			jsonData:jsonData,
			success:function(reply) {
				this.readProduct(this.productId);
				this.fireEvent('productchanged');
			},
			scope:this,
			mask:this
		});
	},

	deleteProduct: function() {
		AERP.Ajax.request({
			url:'/AgileInventory/deleteProduct',
			jsonData:{productId:this.productId},
			success:function(reply) {
				this.productId = null;
				this.docFormReset();
				this.fireEvent('productchanged');
			},
			scope:this,
			mask:this
		});
	},

	readOnHand: function(productId) {
		AERP.Ajax.request({
			url:'/AgileInventory/readOnHand',
			jsonData:{productId:productId},
			success:function(reply) {
				let viewModel = this.getViewModel();
				viewModel.getStore('OnHandStore').loadData(reply.data);
				viewModel.getStore('AdjustmentOnHandStore').loadData(reply.data);
				viewModel.getStore('TransferFromOnHandStore').loadData(reply.data);
				viewModel.getStore('TransferToOnHandStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	readTransactionHistory: function(productId) {
		AERP.Ajax.request({
			url:'/AgileInventory/readTransactionHistory',
			jsonData:{productId:productId},
			success:function(reply) {
				this.getViewModel().getStore('TransactionHistoryStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	},

	adjustQuantity: function() {
		if(!this.productId) {
			Ext.Msg.alert("Error", "No Product Selected!");
			return;
		}

		let adjustmentType = this.queryById("adjustmentType").getValue();
		let adjustmentQuantity = this.queryById("adjustmentQuantity").getValue();
		let adjustmentLocation = this.queryById("adjustmentLocation").getValue();
		let adjustmentBin = this.queryById("adjustmentBin").getValue();

		if(!adjustmentType) {
			Ext.Msg.alert("Error", "Select a Type!");
			return;
		}

		if(!adjustmentQuantity) {
			Ext.Msg.alert("Error", "Enter a Quantity!");
			return;
		}

		if(adjustmentQuantity <= 0) {
			Ext.Msg.alert("Error", "Enter a Quantity Over 0!");
			return;
		}

		if(!adjustmentLocation) {
			Ext.Msg.alert("Error", "Select a Location!");
			return;
		}

		if(!adjustmentBin) {
			Ext.Msg.alert("Error", "Select a Bin!");
			return;
		}

		AERP.Ajax.request({
			url:"/AgileInventory/adjustQuantity",
			jsonData:{
				productId:this.productId,
				adjustmentType:adjustmentType,
				adjustmentQuantity:adjustmentQuantity,
				adjustmentLocation:adjustmentLocation,
				adjustmentBin:adjustmentBin
			},
			success:function(reply) {
				this.readProduct(this.productId);
			},
			scope:this,
			mask:this
		});
	},

	transferQuantity: function() {
		if(!this.productId) {
			Ext.Msg.alert("Error", "No Product Selected!");
			return;
		}


		let transferQuantity = this.queryById("transferQuantity").getValue();
		let transferFromLocation = this.queryById("transferFromLocation").getValue();
		let transferFromBin = this.queryById("transferFromBin").getValue();
		let transferToLocation = this.queryById("transferToLocation").getValue();
		let transferToBin = this.queryById("transferToBin").getValue();

		if(!transferQuantity) {
			Ext.Msg.alert("Error", "Enter a Quantity!");
			return;
		}

		if(transferQuantity <= 0) {
			Ext.Msg.alert("Error", "Enter a Quantity Over 0!");
			return;
		}

		if(!transferFromLocation) {
			Ext.Msg.alert("Error", "Select a From Location!");
			return;
		}

		if(!transferFromBin) {
			Ext.Msg.alert("Error", "Select a From Bin!");
			return;
		}

		if(!transferToLocation) {
			Ext.Msg.alert("Error", "Select a To Location!");
			return;
		}

		if(!transferToBin) {
			Ext.Msg.alert("Error", "Select a To Bin!");
			return;
		}

		AERP.Ajax.request({
			url:"/AgileInventory/transferQuantity",
			jsonData:{
				productId:this.productId,
				transferQuantity:transferQuantity,
				transferFromLocation:transferFromLocation,
				transferFromBin:transferFromBin,
				transferToLocation:transferToLocation,
				transferToBin:transferToBin
			},
			success:function(reply) {
				this.readProduct(this.productId);
			},
			scope:this,
			mask:this
		});
	}

});