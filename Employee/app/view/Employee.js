/*
 * File: app/view/Employee.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Employee.view.Employee', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.employee',

	requires: [
		'Employee.view.EmployeeViewModel',
		'Employee.view.EmployeeForm',
		'Ext.grid.Panel',
		'Ext.toolbar.Toolbar',
		'Ext.grid.column.Date',
		'Ext.view.Table'
	],

	viewModel: {
		type: 'employee'
	},
	frame: true,
	minHeight: 500,
	minWidth: 500,
	title: 'Employee',
	defaultListenerScope: true,

	layout: {
		type: 'hbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'gridpanel',
			flex: 1,
			itemId: 'employeeGrid',
			bind: {
				store: '{EmployeeStore}'
			},
			dockedItems: [
				{
					xtype: 'toolbar',
					dock: 'top',
					itemId: 'employeeToolbar'
				}
			],
			columns: [
				{
					xtype: 'gridcolumn',
					dataIndex: 'employeeNumber',
					text: 'Employee No.'
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'firstName',
					text: 'First Name'
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'lastName',
					text: 'Last Name'
				},
				{
					xtype: 'datecolumn',
					dataIndex: 'hireDate',
					text: 'Hire Date',
					format: 'F n, Y'
				},
				{
					xtype: 'gridcolumn',
					width: 130,
					dataIndex: 'position',
					text: 'Position'
				},
				{
					xtype: 'datecolumn',
					width: 150,
					dataIndex: 'lastLogin',
					text: 'Last Log In',
					format: 'F n, Y h:ia'
				},
				{
					xtype: 'datecolumn',
					width: 150,
					dataIndex: 'lastActivity',
					text: 'Last Activity',
					format: 'F n, Y h:ia'
				}
			],
			listeners: {
				selectionchange: 'onGridpanelSelectionChange'
			}
		},
		{
			xtype: 'employeeform',
			itemId: 'employeeForm',
			listeners: {
				employeechanged: 'onPanelEmployeeChangeD'
			}
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onGridpanelSelectionChange: function(model, selected, eOpts) {
		if(!selected || selected.length !== 1) {
			return;
		}

		selected = selected[0];

		this.queryById('employeeForm').readEmployee(selected.data.employeeId);
	},

	onPanelEmployeeChangeD: function(panel) {
		this.readEmployees();
	},

	onPanelAfterRender: function(component, eOpts) {
		this.buildNiceGridMenu();
		this.readEmployees();
	},

	buildNiceGridMenu: function() {
		Ext.create('NiceGridMenu', {
			menuItems:[],
			callbackHandler:function(action, data){},
			filterField:true,
			grid:this.queryById('employeeGrid'),
			toolbar:this.queryById('employeeToolbar'),
			scope:this
		});
	},

	readEmployees: function() {
		AERP.Ajax.request({
			url:'/Employee/readEmployees',
			success:function(reply) {
				this.getViewModel().getStore('EmployeeStore').loadData(reply.data);
			},
			scope:this,
			mask:this
		});
	}

});