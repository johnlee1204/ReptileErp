/*
 * File: app/view/EggForm.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Incubator.view.EggForm', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.eggform',

	mixins: [
		'DocForm'
	],
	requires: [
		'Incubator.view.EggFormViewModel',
		'Ext.toolbar.Toolbar',
		'Ext.form.field.Date',
		'Ext.tab.Panel',
		'Ext.tab.Tab',
		'Ext.form.field.ComboBox',
		'Ext.form.field.Checkbox'
	],

	viewModel: {
		type: 'eggform'
	},
	bodyStyle: 'background:none',
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	dockedItems: [
		{
			xtype: 'toolbar',
			dock: 'top',
			itemId: 'eggFormToolbar'
		}
	],
	items: [
		{
			xtype: 'container',
			padding: 10,
			layout: 'vbox',
			items: [
				{
					xtype: 'textfield',
					itemId: 'serial',
					fieldLabel: 'Serial',
					labelAlign: 'right'
				},
				{
					xtype: 'datefield',
					itemId: 'layDate',
					fieldLabel: 'Lay Date',
					labelAlign: 'right'
				}
			]
		},
		{
			xtype: 'tabpanel',
			flex: 1,
			bodyStyle: 'background:none',
			activeTab: 0,
			deferredRender: false,
			items: [
				{
					xtype: 'panel',
					flex: 1,
					layout: 'vbox',
					bodyPadding: 10,
					bodyStyle: 'background:none',
					title: 'Egg',
					items: [
						{
							xtype: 'combobox',
							itemId: 'maleParent',
							fieldLabel: 'Male Parent',
							labelAlign: 'right',
							displayField: 'serial',
							forceSelection: true,
							queryMode: 'local',
							valueField: 'reptileId',
							bind: {
								store: '{MaleParentStore}'
							}
						},
						{
							xtype: 'combobox',
							itemId: 'femaleParent',
							fieldLabel: 'Female Parent',
							labelAlign: 'right',
							displayField: 'serial',
							forceSelection: true,
							queryMode: 'local',
							valueField: 'reptileId',
							bind: {
								store: '{FemaleParentStore}'
							}
						},
						{
							xtype: 'datefield',
							itemId: 'hatchDate',
							fieldLabel: 'Hatch Date',
							labelAlign: 'right'
						},
						{
							xtype: 'checkboxfield',
							itemId: 'hatched',
							margin: '0 0 0 104',
							boxLabel: 'Hatched',
							inputValue: '1',
							uncheckedValue: '0'
						},
						{
							xtype: 'combobox',
							itemId: 'reptile',
							fieldLabel: 'Reptile',
							labelAlign: 'right',
							displayField: 'serial',
							forceSelection: true,
							queryMode: 'local',
							valueField: 'reptileId',
							bind: {
								store: '{ReptileStore}'
							}
						}
					]
				},
				{
					xtype: 'panel',
					bodyStyle: 'background:none',
					title: 'Family Tree',
					layout: {
						type: 'vbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'container',
							docFormSkip: true,
							flex: 1,
							itemId: 'familyTreeContainer'
						}
					]
				}
			]
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onPanelAfterRender: function(component, eOpts) {
		this.docFormInit({
			toolbarId:"eggFormToolbar",
			addFn:'createEgg',
			saveFn:'updateEgg',
			deleteFn:'deleteEgg'
		});

		AERP.Ajax.request({
			url:"/Incubator/readAppInitData",
			success:function(reply) {
				let viewModel = this.getViewModel();

				viewModel.getStore("MaleParentStore").loadData(reply.maleReptiles);
				viewModel.getStore("FemaleParentStore").loadData(reply.femaleReptiles);
				viewModel.getStore("ReptileStore").loadData(reply.reptiles);
			},
			scope:this,
			mask:this
		});
	},

	readEgg: function(eggId) {
		AERP.Ajax.request({
			url:"/Incubator/readEgg",
			jsonData:{eggId:eggId},
			success:function(reply) {
				this.eggId = eggId;
				this.readFamilyTree();
				this.docFormLoadFormData(reply);
			},
			scope:this,
			mask:this
		});
	},

	readFamilyTree: function() {


		// AERP.Ajax.request({
		// 	url:"/Incubator/readFamilyTree",
		// 	jsonData:{eggId:this.eggId},
		// 	success:function(reply) {
		// 		var chart = new OrgChart(this.queryById('familyTreeContainer').getEl().dom, {
		// 			nodeBinding: {
		// 				field_0: "name"
		// 			},
		// 			template: "ana"
		// 		});

		// 		chart.on('render-link', function(sender, args){
		// 			if (args.cnode.ppid != undefined){
		// 				args.html += '<use xlink:href="#baby" x="'+ args.p.xa +'" y="'+ args.p.ya +'"/>';
		// 			}
		// 		});

		// 		chart.load([
		// 			{ id: 1, tags: ["blue"], name: "King George VI"},
		// 			{ id: 2, pid: 1, tags: ["partner"], name: "Queen Elizabeth"},
		// 			{ id: 3, pid: 1, tags: ["blue"],  ppid: 2, name: "Queen Elizabeth II"},
		// 			{ id: 4, pid: 3, tags: ["left-partner"], name: "Prince Philip"},
		// 			{ id: 5, pid: 1, ppid: 2, name: "Princess Margaret"},
		// 			{ id: 6, pid: 3,tags: ["blue"], ppid: 4, name: "Charles"},
		// 			{ id: 7, pid: 6, tags: ["partner"] , name: "Diana"},
		// 			{ id: 8, pid: 6, tags: ["partner"], name: "Camila"},
		// 			{ id: 9, pid: 3, ppid: 4 , name: "Anne"},
		// 			{ id: 10, pid: 3, ppid: 4 , name: "Prince Andrew"},
		// 			{ id: 11, pid: 3, ppid: 4, name: "Prince Edward"},
		// 			{ id: 12, pid: 6, ppid: 7, tags: ["blue"], name: "Prince William"},
		// 			{ id: 13, pid: 6, ppid: 7, name: "Prince Harry"},
		// 			{ id: 14, pid: 12, tags: ["left-partner"], name: "Catherine"},
		// 			{ id: 15, pid: 13, tags: ["right-partner"], name: "Meghan Markle"},
		// 			{ id: 16, pid: 12, ppid: 14, tags: ["blue"], name: "Prince George of Cambridge"},
		// 			{ id: 17, pid: 12, ppid: 14, tags: ["blue"], name: "Prince Charlotte of Cambridge"},
		// 			{ id: 18, pid: 12, ppid: 14, tags: ["blue"], name: "Prince Louis of Cambridge"}
		// 		]);
		// 	},
		// 	scope:this,
		// 	mask:this
		// });



		AERP.Ajax.request({
			url:"/Incubator/readFamilyTree",
			jsonData:{eggId:this.eggId},
			success:function(reply) {
				var chart = new OrgChart(this.queryById('familyTreeContainer').getEl().dom, {
					nodeBinding: {
						field_0: "name"
					},
					template: "ana"
				});

				chart.on('render-link', function(sender, args){
					if (args.cnode.ppid != undefined){
						args.html += '<use xlink:href="#baby" x="'+ args.p.xa +'" y="'+ args.p.ya +'"/>';
					}
				});

				chart.load([
					{ id: 1, name: "Jeff" },
					{ id: 2, pid: 1, tags: ["partner"], name: "Elizabeth" },
					{ id: 6, pid: 1, tags: ["partner"], name: "Nichole" },
					{ id: 8, pid: 1, tags: ["partner"], name: "Cindy" },
					{ id: 3, pid: 1, ppid: 2, name: "John" },
					{ id: 4, pid: 3, tags: ["partner"], name: "Chris" },
					{ id: 5, pid: 3, tags: ["partner"], name: "Hannah" },
					{ id: 7, pid: 1, ppid: 6, name: "Sara" }
				]);
			},
			scope:this,
			mask:this
		});



	},

	createEgg: function() {
		AERP.Ajax.request({
			url:"/Incubator/createEgg",
			jsonData:this.docFormGetAllFieldValues(),
			success:function(reply) {
				this.readEgg(reply.data);
				this.fireEvent('eggchanged');
			},
			scope:this,
			mask:this
		});
	},

	updateEgg: function() {
		let jsonData = this.docFormGetAllFieldValues();
		jsonData.eggId = this.eggId;

		AERP.Ajax.request({
			url:"/Incubator/updateEgg",
			jsonData:jsonData,
			success:function(reply) {
				this.readEgg(this.eggId);
				this.fireEvent('eggchanged');
			},
			scope:this,
			mask:this
		});
	},

	deleteEgg: function() {
		AERP.Ajax.request({
			url:"/Incubator/deleteEgg",
			jsonData:{eggId:this.eggId},
			success:function(reply) {
				this.eggId = null;
				this.docFormReset();
				this.fireEvent('eggchanged');
			},
			scope:this,
			mask:this
		});
	}

});